############ PEPARE WINDOWS ####################
# Disable Bit Locker on Windows
-> Settings -> BitLocker -> Disable

# Switch to AHCI
1. boot windows
2. bcdedit /set {default} safeboot minimal
3. reboot, enter bios, set SATA to AHCI
4. contiune booting windows to safe mode
5. now windows will automatically enable AHCI drivers
6. bcdedit /deletevalue {default} safeboot

################################################

############# RESIZE NTFS ####################

# find devices
sudo -i
lsblk

# check existing partition
mount /dev/nvme0n1p3 /mnt
ls /mnt
umount /mnt

# resize NTFS file system
ntfsresize -n -i /dev/nvme0n1p3
ntfsresize -n -s 128G /dev/nvme0n1p3
ntfsresize -s 128G /dev/nvme0n1p3

# resize partition table itself
parted /dev/nvme0n1
  print
  rm 3
  mkpart
    "Basic data partition"
    290MB
    129GB
  print
  set 3 msftdata on
  print
  quit

# test new partition
mount /dev/nvme0n1p3 /mnt
ls /mnt
umount /mnt

# reboot into windows and check if it boots
reboot

###### IF BOOT FAILS

1. Prepare a live Windows stick
2. Verify partition is mounted on C: (by running Notepad and checking This PC)
3. Run commands
  bootrec /fixboot
  bcdboot c:\windows
4. hit "exit" and reboot, select "Windows on Volume 3"
5. After booting to windows, delete extra useless boot option

bcdedit
bcdedit /delete {blah blah blah}
bcdedit

6. reboot

################################################
INSTALLATION USING LUKS
################################################

sudo -i
lsblk
parted /dev/nvme0n1
  print
  mkpart primary 129GB 511GB
  print
  quit

lsblk

cryptsetup luksFormat --type=luks1 /dev/nvme0n1p5
cryptsetup luksOpen /dev/nvme0n1p5 enc

pvcreate /dev/mapper/enc
pvdisplay

vgcreate vg /dev/mapper/enc
vgdisplay

lvcreate -l 100%FREE -n root vg
lvdisplay

>>> Install using "Something Else"

>>> Enable Encrypted GRUB
  # As soon as you have completed those forms switch to the Terminal to configure GRUB:

  echo "GRUB_ENABLE_CRYPTODISK=y" >> /target/etc/default/grub

  # This has to be done before the installer reaches the
  # Install Bootloader stage at the end of the installation process.


>>> Post Installation

mount /dev/mapper/vg-root /target
for n in proc sys dev etc/resolv.conf; do mount --rbind /$n /target/$n; done
chroot /target
mount -a

apt install -y cryptsetup-initramfs

echo "KEYFILE_PATTERN=/etc/luks/*.keyfile" >> /etc/cryptsetup-initramfs/conf-hook
echo "UMASK=0077" >> /etc/initramfs-tools/initramfs.conf

mkdir /etc/luks
dd if=/dev/urandom of=/etc/luks/boot_os.keyfile bs=4096 count=1

chmod u=rx,go-rwx /etc/luks
chmod u=r,go-rwx /etc/luks/boot_os.keyfile

cryptsetup luksAddKey /dev/nvme0n1p5 /etc/luks/boot_os.keyfile

echo "enc UUID=$(blkid -s UUID -o value /dev/nvme0n1p5) /etc/luks/boot_os.keyfile luks,discard" >> /etc/crypttab

update-initramfs -u -k all

################################################
################################################
################################################

# change mirror to Main Server
Activities -> Software & Updates -> Ubuntu Software -> Download from: -> Main Server

# update system
sudo -i
  apt-get update && apt-get -y upgrade && apt-get -y dist-upgrade && apt-get -y autoremove && do-release-upgrade
  reboot

# install tools
sudo apt-get install -y vim tmux screen htop psmisc wget xz-utils openssh-server ufw mlocate uuid-runtime tcpdump man-db traceroute w3m bridge-utils default-jdk git rar unrar iputils-arping network-manager-openvpn-gnome network-manager-openconnect-gnome iperf curl uget gnome-tweak-tool python3-pip p7zip-full p7zip net-tools pulseaudio snapd clang wine winetricks xclip python3-venv gawk jq sshpass jsonnet whois ncat silversearcher-ag vim-nox gimp

# setup RSA key
ssh-keygen -t rsa

# setup language
Settings -> Reguin and Language -> setup persian

## reboot

## Tweaks -> Apperance -> Application -> Yaru-dark
## Gedit -> colors -> solatized dark
## Caps As Ctrl

## Settings -> Keyboard Shortcuts -> Switch to next input source -> Ctrl + Space
## Settings -> Keyboard Shortcuts -> Move to workspace above -> Ctrl + Alt + k
## Settings -> Keyboard Shortcuts -> Move to workspace blow -> Ctrl + Alt + j
## Settings -> Keyboard Shortcuts -> Close window -> Ctrl + Backspace

## Setup VPN

## install chrome

# setup python
python3 -m venv ~/.venv3
source ~/.venv3/bin/activate
pip install --upgrade pip
pip install wheel
pip install pysocks
pip install awscli
pip install pylint flake8 mypy
pip install msgpack

# create bash completion for pip
mkdir -p ~/.bash_completions
pip completion --bash > ~/.bash_completions/pip3
vim ~/.bashrc
............................
source $HOME/.bash_completions/pip3
............................

# update profile
mkdir -p ~/.local/{bin,lib,src,include,opt,tmp}
vim ~/.profile
............................
export PATH="$HOME/bin:$HOME/.local/bin:$PATH"
export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/local/lib:$HOME/.local/lib"
............................

# configure firewall
sudo systemctl enable ufw
sudo systemctl restart ufw
sudo ufw enable

# configure ssh
sudo vim /etc/ssh/sshd_config
...
Port 2122
PermitRootLogin no
...
sudo ufw reload
sudo ufw default deny incoming
sudo ufw default allow outgoing
sudo ufw allow 2122/tcp
sudo ufw reload
sudo systemctl enable sshd
sudo systemctl restart sshd

# enable upnp
sudo ufw reload
sudo ufw allow 1900/udp
sudo ufw reload

# configure sysctl
sudo vim /etc/sysctl.conf
..........................................
fs.inotify.max_user_watches = 524288
..........................................

# reload sysctl
sudo sysctl -p --system

# set default editor to vim
sudo update-alternatives --config editor

# install other restricted areas
sudo apt-get install ubuntu-restricted-extras

# install smplayer
sudo apt-get install smplayer

# install mplayer2
sudo apt-get install mplayer

# install vlc
sudo apt-get install vlc vlc-data

# configure git
git config --global user.name "Mohamadmehdi Kharatizadeh:
git config --global user.email "info@ucoder.ir"
git config --global credential.helper store
vim ~/.git-credentials
...........................................
https://arcana261:xxxxxxxxxx@github.com
https://oauth2:xxxxxxxxxxx@git.cafebazaar.ir
...........................................

# install samba server
sudo apt-get install samba samba-common
sudo cp /etc/samba/smb.conf /etc/samba/smb.conf.org

# create shared folder configuration
mkdir -p ~/.local/share
sudo vim /etc/samba/smb.conf
.....
[general]
       map to guest = bad user

[junk]
       comment = share
       path = /home/arcana/.local/share
       browsable = yes
       writable = yes
       guest ok = yes
       read only = no
       force user = arcana
       force group = arcana
.....

# enable and restart samba service
sudo systemctl restart smbd
sudo systemctl enable smbd
sudo systemctl status smbd

# allow ports through firewall
sudo ufw reload
sudo ufw allow 139/tcp
sudo ufw allow 445/tcp
sudo ufw reload

# configure bash completion
# Install or update bash-complete-partial-path
mkdir -p "$HOME/.config/bash-complete-partial-path/" && \
curl \
 -o "$HOME/.config/bash-complete-partial-path/bash_completion" \
  "https://raw.githubusercontent.com/sio/bash-complete-partial-path/stable/bash_completion"

## Install extended bashrc from Notes!
vim ~/.bashrc
..........................
source $HOME/Documents/notes/sysconfig/bashrc.sh
..........................

## Install extended tmux conf from Notes!

# setup dns resolver
sudo vim /etc/systemd/resolved.conf
..........................
DNS=4.2.2.4 8.8.8.8
Domains=~
..........................
sudo systemctl restart systemd-resolved.service

# flush dns
systemd-resolve --flush-caches

# view dns resolver status
systemd-resolve --status

## Install fuzzy finder
mkdir -p ~/.local/src
git clone --depth 1 https://github.com/junegunn/fzf.git ~/.local/src/fzf
~/.local/src/fzf/install

## Install VIM plugins
mkdir -p ~/.vim/pack/vendor/start
# install nerdtree
git clone --depth 1 https://github.com/preservim/nerdtree.git ~/.vim/pack/vendor/start/nerdtree
git clone --depth 1 https://github.com/ciaranm/detectindent.git ~/.vim/pack/vendor/start/detectindent
# install ale
mkdir -p ~/.vim/pack/git-plugins/start
git clone --depth 1 https://github.com/dense-analysis/ale.git ~/.vim/pack/git-plugins/start/ale
# install fzf
mkdir -p ~/.vim/pack/git-plugins/start
git clone --depth 1 https://github.com/junegunn/fzf.git ~/.vim/pack/git-plugins/start/fzf
git clone --depth 1 https://github.com/junegunn/fzf.vim.git ~/.vim/pack/git-plugins/start/fzf.vim
# install deoplete
mkdir -p ~/.vim/pack/git-plugins/start
git clone --depth 1 https://github.com/roxma/nvim-yarp.git ~/.vim/pack/git-plugins/start/nvim-yarp
git clone --depth 1 https://github.com/roxma/vim-hug-neovim-rpc.git ~/.vim/pack/git-plugins/start/vim-hug-neovim-rpc
git clone --depth 1 https://github.com/Shougo/deoplete.nvim.git ~/.vim/pack/git-plugins/start/deoplete
source ~/.venv3/bin/activate
pip install pynvim
# install theme
mkdir -p ~/.vim/pack/git-plugins/start
git clone --depth 1 https://github.com/mhartington/oceanic-next.git ~/.vim/pack/git-plugins/start/oceanic-next
# install airline
mkdir -p ~/.vim/pack/git-plugins/start
git clone --depth 1 https://github.com/vim-airline/vim-airline.git ~/.vim/pack/git-plugins/start/vim-airline
# install fugitive.vim
mkdir -p ~/.vim/pack/git-plugins/start
git clone --depth 1 https://github.com/tpope/vim-fugitive.git ~/.vim/pack/git-plugins/start/vim-fugitive
# install vim-terminal
mkdir -p ~/.vim/pack/git-plugins/start
git clone --depth 1 https://github.com/tc50cal/vim-terminal.git ~/.vim/pack/git-plugins/start/vim-terminal
# install vimspector
mkdir -p ~/.vim/pack/git-plugins/start
git clone https://github.com/puremourning/vimspector ~/.vim/pack/vimspector/opt/vimspector
~/.vim/pack/vimspector/opt/vimspector/install_gadget.py --all --disable-tcl
# install deoplete-go
go get -u -v github.com/stamblerre/gocode
mkdir -p ~/.vim/pack/git-plugins/start
git clone --depth 1 https://github.com/deoplete-plugins/deoplete-go.git ~/.vim/pack/git-plugins/start/deoplete-go
(cd ~/.vim/pack/git-plugins/start/deoplete-go && make)
# install vim-jsonnet
mkdir -p ~/.vim/pack/git-plugins/start
git clone --depth 1 https://github.com/google/vim-jsonnet.git ~/.vim/pack/git-plugins/start/vim-jsonnet
# install go-langserver for ALE
go get -v -u github.com/sourcegraph/go-langserver

# create a good vimrc
vim ~/.vimrc
.................
source $HOME/Documents/notes/sysconfig/vimrc.vim
.................

## Disable swap
# find swap
cat /etc/fstab
# turn it off
sudo swapoff /swapfile
# remove entry from fstab
sudo vim /etc/fstab
[x] .................
/swapfile .........
.................
# remove swap file
sudo rm -f /swapfile

## Install protoc from guide

## Install Go from guide

## Install Slack

## Install Extensions
Drop Down Terminal
 -> Hotkey: F1
 -> Height: 100%
 -> Transparency: 100
 -> Command: tmux attach
Persian Calendar

## Install Kubectl
# create bash completion for kubectl
mkdir -p ~/.bash_completions
kubectl completion bash > ~/.bash_completions/kubectl
vim ~/.bashrc
............................
source $HOME/.bash_completions/kubectl
............................

## Configure Ocean Bashrc

## Autohide dock
Settings -> Apperance -> Autohide dock

## Install discord
  ## -> F10 -> Toggle Mute

## Install Docker
sudo groupadd docker
sudo usermod -aG docker $USER
newgrp docker

## Install VsCode
 -> Python
 -> Go
   ->> Go: Install or update tools
 -> Git Blame
 -> Diff
 -> Vim
 -> Docker

## Rebuild whois cache
cd ~/Documents/notes/awk/whois
./rebuild-from-cache.sh

## Fix ir routes
## NOTE: set device link name in ~/.bashrc
fix-ir-routes

## Setup Cafe VPN

## Install skype

## Configure Dual Monitor

## Configure Sound Settings

## Install Telepresence

# Better config SSH
vim ~/.ssh/config
................................
Host *
  StrictHostKeyChecking no
................................
chmod 600 ~/.ssh/config

# Configure my server's SSH
vim ~/.ssh/config
................................
Host ucoder
  Hostname srv4.ucoder.ir
  Port xxxx
  User xxxx
................................

## Configure ocean SSH

## Configure AWS keys
mkdir -p ~/.aws
vim ~/.aws/credentials
..............................
[name]
aws_access_key_id=xxxxxxxxxxxxxx
aws_secret_access_key=xxxxxxxxxxxxx
..............................

## Install Youtube Music

## Change Wallpaper

## Change Avatar

## Install MineCraft Client
# create desktop entry
vim ~/.local/share/applications/minecraft.desktop
..........................................
[Desktop Entry]
Version=1.0
Name=Minecraft
Type=Application
Comment=Launch Minecraft
Exec=/home/arcana/.local/bin/minecraft
Categories=Game;
GenericName=Minecraft
..........................................
desktop-file-validate ~/.local/share/applications/minecraft.desktop
update-desktop-database

## Install OBS Studio

## Install OpenShot

## Configure SSH/VPN for
  -> DBS

## Remove `Help` from favorites

## Add chrome to favorites

## Install Charles Proxy

## Install wireshark
sudo apt install wireshark

## install pg_config
sudo apt install libpq-dev


=====================================================================================================
=====================================================================================================
=====================================================================================================
=====================================================================================================
=====================================================================================================

# cat to a file
cat >myfile.txt <<EOL
some blah
EOL


=====================================================================================================
=====================================================================================================
=====================================================================================================
vimspector important notes
=====================================================================================================
=====================================================================================================


F5	When debugging, continue. Otherwise start debugging.	vimspector#Continue()
F3	Stop debugging.	vimspector#Stop()
F4	Restart debugging with the same configuration.	vimspector#Restart()
F6	Pause debugee.	vimspector#Pause()
F9	Toggle line breakpoint on the current line.	vimspector#ToggleBreakpoint()
<leader>F9	Toggle conditional line breakpoint on the current line.	vimspector#ToggleBreakpoint( { trigger expr, hit count expr } )
F8	Add a function breakpoint for the expression under cursor	vimspector#AddFunctionBreakpoint( '<cexpr>' )
F10	Step Over	vimspector#StepOver()
F11	Step Into	vimspector#StepInto()
F12	Step out of current function scope	vimspector#StepOut()



${dollar} - has the value $, can be used to enter a literal dollar
$$ - a literal dollar
${workspaceRoot} - the path of the folder where .vimspector.json was found
${workspaceFolder} - the path of the folder where .vimspector.json was found
${gadgetDir} - path to the OS-specifc gadget dir (<vimspector home>/gadgets/<OS>)
${file} - the current opened file
${relativeFile} - the current opened file relative to workspaceRoot
${fileBasename} - the current opened file’s basename
${fileBasenameNoExtension} - the current opened file’s basename with no file extension
${fileDirname} - the current opened file’s dirname
${fileExtname} - the current opened file’s extension
${cwd} - the current working directory of the active window on launch


## Python Remote Debug with `debugpy`
## python -m debugpy --listen 0.0.0.0:5678 program.py
## python -m debugpy --listen 0.0.0.0:5678 -m module
{
  "configurations": {
    "Python Attach": {
      "adapter": "multi-session",
      "configuration": {
        "request": "attach",
        "justMyCode": false,
        "pathMappings": [
          {
            "localRoot": "${workspaceRoot}",
            "remoteRoot": "."
          }
        ]
      }
    }
  }
}
