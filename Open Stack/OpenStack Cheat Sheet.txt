IPROUTE2 CHEATSHEET:
http://baturin.org/docs/iproute2/

TUNNEL CHEATSHEET WITH IPROUTE:
http://www.deepspace6.net/docs/iproute2tunnel-en.html

DEAMONS TO TURN UNIX WORKSTATION INTO A ROUTER:
http://freecode.com/projects/mrouted
http://freecode.com/projects/pimd

REMEMBERR: linux bridging acts funny if physical ethernet
attached to bridge has IP address.. IP address should
be assigned to bridge instead of ethernet!


Neutron
===============================

# view running neutron services
sudo openstack network agent list

# check dnsmasq (dhcp server) running on controller node
ps aux | grep dnsmasq

# debug dhcp issue by tcpdump
tcpdump -i br100 -n port 67 or port 68

# delete a port
neutron port-delete <port id>

# delete a subnet
neutron subnet-delete <subnet id>

# view network namespaces
sudo ip netns

# view FDB (router forwarding database)
sudo bridge fdb show

# view birdges
sudo brctl show

# enable ipv4 forwarding in kernel
sudo bash -c "echo 1 > /proc/sys/net/ipv4/ip_forward"

# view network namespace configs
sudo ip netns exec <NAMESPACE> ip link show
sudo ip netns exec <NAMESPACE> ip addr show

# up/down interface
sudo ip link set dev <ETH> up
sudo ip link set dev <ETH> down

# change interface name
sudo ip link set dev eth0 name inside

# add default route (gw)
sudo ip route add default via <GATEWAY> dev <ETHERNET>

# create a new tap device
sudo ip tuntap add name tap0 mode tap

# create a new bridge
sudo brctl addbr mybridge

# add interface to bridge
sudo brctl addif mybridge eth0

# view a certain bridge
sudo brctl showbr mybridge

# view macs in bridge
sudo brctl showmacs mybridge

# view arp table
arp

# view NDP (neighborhood discovery protocol) table
sudo ip neighbor show

Compute
===============================

# view instance or VM log
openstack console log show <VM name or UUID>

KVM
===============================

# view running instances
sudo virsh list

# view all configuration of instance
sudo virsh dumpxml <NAME>

# view birdges
sudo brctl show

# view ethernet information
ethtool -i tapad44a2b4-1b

# view arp table
arp

VXLAN Playground (uni-cast)
-> assume server1 physical address 192.168.73.40
-> assume server2 physical address 192.168.73.41
-> assume server3 physical address 192.168.73.42
--> assume server1 vxlan address 192.168.80.40
--> assume server2 vxlan address 192.168.80.41
--> assume server3 vxlan address 192.168.80.42
===============================

# all servers
sudo ufw reload
sudo ufw allow 4789/udp
sudo ufw reload

### server 1 #####################

# create a unicast vxlan between server1 and server2
sudo ip link add name vxlan2 type vxlan id 41 dev eth0 remote 192.168.73.41 local 192.168.73.40 dstport 4789
sudo ip link set dev vxlan2 up

# create a unicast vxlan between server1 and server3
sudo ip link add name vxlan3 type vxlan id 42 dev eth0 remote 192.168.73.42 local 192.168.73.40 dstport 4789
sudo ip link set dev vxlan3 up

# create a bridge between two vxlan's
sudo brctl addbr br0
sudo ip link set dev br0 up
sudo brctl addif br0 vxlan2
sudo brctl addif br0 vxlan3

# assign ip address to bridge
sudo ip addr add 192.168.80.40/24 broadcast 192.168.80.255 dev br0

### END OF server 1 #####################

### server 2 #####################

# create a unicast vxlan between server1 and server2
sudo ip link add name vxlan2 type vxlan id 41 dev eth0 remote 192.168.73.40 local 192.168.73.41 dstport 4789
sudo ip link set dev vxlan2 up

# assign ip address to vxlan
sudo ip addr add 192.168.80.41/24 broadcast 192.168.80.255 dev vxlan2

### END OF server 2 #####################

### server 3 #####################

# create a unicast vxlan between server1 and server3
sudo ip link add name vxlan3 type vxlan id 42 dev eth0 remote 192.168.73.40 local 192.168.73.42 dstport 4789
sudo ip link set dev vxlan3 up

# assign ip address to vxlan3
sudo ip addr add 192.168.80.42/24 broadcast 192.168.80.255 dev vxlan3

### END OF server 3 #####################

Network Namespaces Playground
===============================

# add network namespace
sudo ip netns add <new namespace name>

# view current network namespaces
sudo ip netns list

# create a new veth (virtual ethernet) to assign to network namespace
sudo ip link add veth0 type veth peer name veth1

# verify veth is created
# there should be 2 veth's
# veth0 and veth1
# which should be linked to each other
sudo ip link list

# assign veth1 to namespace
ip link set dev veth1 netns <NAMESPACE NAME>

# verify veth1 is assigned to namespace
# veth1 should exist on our namespace
# but not on global namespace
sudo ip netns exec <NAMESPACE NAME> ip link list
sudo ip link list

# enable loopback interface
sudo ip netns exec <NAMESPACE NAME> ip link set dev lo up
sudo ip netns exec <NAMESPACE NAME> ip link addr add 127.0.0.1/8 dev lo

# enable veth interfaces
sudo ip link set dev veth0 up
sudo ip netns exec <NAMESPACE NAME> ip link set dev veth1 up

>>>>>>>> USE BRIDGE
# assign ip inside namespace
sudo ip netns exec <NAMESPACE NAME> ip addr add <IP>/<CIDR> broadcast <IP> dev veth1
sudo ip netns exec <NAMESPACE NAME> ip route add default via <GATEWAY> dev veth1

# remove ip from physical namespace
sudo ip route delete default
sudo ip addr delete <IP>/<CIDR> dev <ETHERNET>

# view current bridges in system
sudo brctl show

# create a new bridge and assign interfaces
sudo brctl addbr br0
sudo brctl addif br0 <ETHERNET>
sudo brctl addif br0 veth0

# veriy bridge
sudo brctl show

# up the bridge
sudo ip link set dev br0 up

# assign ip address to bridge
sudo ip addr add <IP>/<CIDR> broadcast <IP> dev br0
sudo ip route add default via <GATEWAY> dev br0

>>>>>>>> USE NAT
# assign ip to both linked veth's
sudo ip addr add 192.168.74.1/24 broadcast 192.168.74.255 dev veth0
sudo ip netns exec <NAMESPACE> ip addr add 192.168.74.2/24 broadcast 192.168.74.255 dev veth1

# verify assigned ip addresses
ifconfig
sudo ip netns <NAMESPACE> ifconfig

# enable FORWARDing in ufw firewall
sudo vim /etc/default/ufw 
> DEFAULT_FORWARD_POLICY="ACCEPT"

# enable ufw ipv4 port forwarding
sudo vim /etc/ufw/sysctl.conf 
> net.ipv4.ip_forward=1

# setup NAT in ufw
sudo vim /etc/ufw/before.rules
> # add before *filter rules! top of file
> # add before *filter rules! top of file
> # add before *filter rules! top of file
> # add before *filter rules! top of file
> # NAT table rules
> *nat
> :POSTROUTING ACCEPT [0:0]
>
> # Forward traffic through eth0 - Change to match you out-interface
> -A POSTROUTING -s 192.168.74.0/24 -o <ETHERNET> -j MASQUERADE
>
> # don't delete the 'COMMIT' line or these nat table rules won't
> # be processed
> COMMIT

# force restart ufw
sudo ufw disable
sudo ufw enable

# verify masquerade is set
sudo iptables -t nat -L -v

# setup gateway for namespace
sudo ip netns exec <NAMESPACE> ip route add default via 192.168.74.1 dev veth1

===============================
===============================
===============================
===============================
# Share internet access between host and NS.

# Enable IP-forwarding.
echo 1 > /proc/sys/net/ipv4/ip_forward

# Flush forward rules, policy DROP by default.
sudo iptables -P FORWARD DROP
sudo iptables -F FORWARD

# Flush nat rules.
sudo iptables -t nat -F

# Enable masquerading of 10.200.1.0.
sudo iptables -t nat -A POSTROUTING -s 192.168.74.0/255.255.255.0 -o <ETHERNET> -j MASQUERADE

# Allow forwarding between eth0 and v-eth1.
iptables -A FORWARD -i <ETHERNET> -o veth1 -j ACCEPT
iptables -A FORWARD -o <ETHERNET> -i veth1 -j ACCEPT
===============================
===============================
===============================
===============================



===============================
===============================
UFW port forwarding in NAT
===============================
===============================
# NAT table rules
*nat
:PREROUTING ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]

# Port Forwardings
-A PREROUTING -i eth0 -p tcp --dport 22 -j DNAT --to-destination 192.168.1.10

# Forward traffic through eth0 - Change to match you out-interface
-A POSTROUTING -s 192.168.1.0/24 -o eth0 -j MASQUERADE

# don't delete the 'COMMIT' line or these nat table rules won't
# be processed
COMMIT
===============================
===============================
===============================
===============================


> controller
ps -ef | grep dnsmasq



sudo bridge fdb show


sudo ufw reload
sudo ufw allow 4789/udp
sudo ufw allow 8472/udp
sudo ufw reload

# allow DHCP port through firewall
sudo ufw reload
sudo ufw allow 67/udp
sudo ufw allow 68/udp
sudo ufw reload



guide on routing:
http://blog.scottlowe.org/2013/05/29/a-quick-introduction-to-linux-policy-routing/
http://blog.scottlowe.org/2013/05/30/a-use-case-for-policy-routing-with-kvm-and-open-vswitch/















