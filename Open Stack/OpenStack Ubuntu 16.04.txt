# Controller Node -> 6GB
# Compute Node -> 2GB
# Cinder Node -> 1GB

(ufw assign 64MB more RAM)
(docker needs at least 240MB RAM)

#########################################
## install ubuntu net-boot
#########################################

>> install ubuntu 16.04 minimal netboot installation

>> start fedora or some other live thing

>>>>>>> INSIDE LIVE LINUX

sudo bash
pvscan
pvdisplay
vgscan
vgdisplay
lvscan
lvdisplay
mount /dev/ubuntu-vg/root /mnt
mount /dev/sda2 /mnt/boot
mount /dev/sda1 /mnt/boot/efi
mount --rbind /sys /mnt/sys
mount --rbind /dev /mnt/dev
mount --rbind /proc /mnt/proc
mount --make-rslave /mnt/sys
mount --make-rslave /mnt/dev
mount --make-rslave /mnt/proc
chroot /mnt /bin/bash

>>>>>>> INSIDE CHROOT

# configure EFI grub
mkdir -p /boot/efi/EFI/ubuntu/fonts/
cp /usr/share/grub/unicode.pf2 /boot/efi/EFI/ubuntu/fonts/
vi /etc/default/grub
...
... remove GRUB_HIDDEN_TIMEOUT
... remove GRUB_HIDDEN_TIMEOUT_QUIET
GRUB_CMDLINE_LINUX_DEFAULT="console=tty1"
...
grub-mkconfig -o /boot/efi/EFI/ubuntu/grub.cfg

# set root password
passwd root

# reboot system
reboot

#########################################
## configure base host machine
## hostname: "baseubuntu.ostack.me"
## ip: "xxx.10"
#########################################

# update system
sudo apt-get update

# ensure no dead package
sudo apt-get autoremove

# install some tools
sudo apt-get install vim nano screen htop psmisc dnsutils wget \
			xz-utils openssh-server ufw mlocate \
			uuid-runtime tcpdump man-db \
			traceroute w3m bridge-utils
			
# configure firewall
sudo systemctl enable ufw
sudo systemctl restart ufw
sudo ufw enable

# configure ssh
sudo vim /etc/ssh/sshd_config
...
Port 2122
PermitRootLogin no
...
sudo ufw reload
sudo ufw default deny incoming
sudo ufw default allow outgoing
sudo ufw allow 2122/tcp
sudo ufw reload
sudo systemctl enable sshd
sudo systemctl restart sshd

# check ip address and range
ifconfig

# check default route
ip route show

# check default dns server
cat /etc/resolv.conf

# configure vmware ethernet
sudo vim /etc/network/interfaces
...
auto ens38
iface ens38 inet static
	address 192.168.217.10
	netmask 255.255.255.0
	network 192.168.217.0
	broadcast 192.168.217.255
	gateway 192.168.217.2
	dns-search ostack.me
	dns-nameservers 192.168.217.2 4.2.2.4 8.8.8.8
...

# reboot system
sudo reboot

#########################################
## configure base docker machine
## clone: base ubuntu
## hostname: "basedocker.ostack.me"
## ip: "xxx.11"
#########################################

# set host and ip
sudo bash
hostnamectl set-hostname basedocker.ostack.me
vim /etc/hosts
> 127.0.1.1    basedocker.ostack.me
vim /etc/network/interfaces
> address 192.168.217.11
reboot

# import repository
sudo apt-get update
sudo apt-get install apt-transport-https ca-certificates
sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
echo "deb https://apt.dockerproject.org/repo ubuntu-xenial main" | sudo tee /etc/apt/sources.list.d/docker.list
sudo apt-get update

# check if docker-engine is in apt cache
sudo apt-cache policy docker-engine

# install prerequisities
sudo apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual

# reboot server
sudo reboot

# instal docker-engine
sudo apt-get install docker-engine

# install privoxy to help docker pull images over sanctions
sudo apt-get install privoxy
sudo systemctl enable privoxy
sudo vim /etc/privoxy/config
<<<<<<<<<<<<<<<<<<<<
listen-address	127.0.0.1:8085
forward-socks5	/		127.0.0.1:8084	.
>>>>>>>>>>>>>>>>>>>>
sudo systemctl restart privoxy

# enable proxy in docker
sudo mkdir -p /etc/systemd/system/docker.service.d
sudo vim /etc/systemd/system/docker.service.d/http-proxy.conf
...
[Service]
Environment="HTTP_PROXY=http://127.0.0.1:8085/"
...
sudo systemctl daemon-reload
sudo systemctl enable docker
sudo systemctl restart docker

# check if proxy is present
sudo docker info

# add user to docker group
sudo gpasswd -a arcana docker
sudo gpasswd -a root docker

# reboot
sudo reboot

# create password-less login to VPN server
sudo apt-get install ssh
ssh-keygen -t rsa
ssh root@178.162.207.98 mkdir -p .ssh
cat ~/.ssh/id_rsa.pub | ssh root@178.162.207.98 'cat >> .ssh/authorized_keys'
ssh root@178.162.207.98 "chmod 700 .ssh; chmod 640 .ssh/authorized_keys"
ssh root@178.162.207.98

# you should see under key Http Proxy
# fireup a SOCKS5 proxy server on localhost:8084
ssh -D 8084 root@178.162.207.98

# test docker
docker pull ubuntu:xenial
docker run --rm -it ubuntu:xenial
>>>>>>>>>>>>>>>>>>>>>>>>>>>
exit
<<<<<<<<<<<<<<<<<<<<<<<<<<<

# install python pip since docker-compose
# is available to install through pip
sudo apt-get install python-pip

# upgrade it
sudo pip install --upgrade pip

# check pip version
pip --version

# install docker-compose
sudo pip install docker-compose

# check docker compose
docker-compose version

# create base network
docker network create -d bridge ostack.me

#########################################
## configure DNS server
## clone: base docker
## hostname: "dns.ostack.me"
## ip: "xxx.12"
## RAM: 400MB
#########################################

# set host and ip
sudo bash
hostnamectl set-hostname dns.ostack.me
vim /etc/hosts
> 127.0.1.1    dns.ostack.me
vim /etc/network/interfaces
> address 192.168.217.12
reboot

# pull bind image
docker pull sameersbn/bind:latest

# start bind
docker run -td --restart=always --name ns1.ostack.me -h ns1.ostack.me -e ROOT_PASSWORD=root --net ostack.me -w /etc/webmin -p 53:53/udp -p 53:53/tcp -p 10000:10000/tcp sameersbn/bind:latest
sudo ufw reload
sudo ufw allow 53/tcp
sudo ufw allow 53/udp
sudo ufw allow 10000/tcp
sudo ufw reload

##
## add <IP> ns1.ostack.me to /etc/hosts of physical machine
## open "https://ns1.ostack.me:10000" in browser
## login with "root/root"
##
>> open Servers -> BIND DNS Server
-> Setup RDNC
-> Forwarding and Transfers -> 4.2.2.4
                            -> 8.8.8.8
-> Create Master Zone -> Domain name/Network -> ostack.me.
                      -> Email Address -> m_kharatizadeh@yahoo.com

..... ADD ENTRIES .....
> @
> ns1.ostack.me
> dns.ostack.me
> basedocker.ostack.me
> baseubuntu.ostack.me
.......................

# restart DNS service
docker restart ns1.ostack.me

#########################################
## SET DNS SERVER IN ALL OF MACHINES
#########################################

#########################################
## configure base zabbix
## clone: base ubuntu
## hostname: "basezabbix.ostack.me"
## ip: "xxx.13"
#########################################

# set host and ip
sudo bash
hostnamectl set-hostname basezabbix.ostack.me
vim /etc/hosts
> 127.0.1.1    basezabbix.ostack.me
vim /etc/network/interfaces
> address 192.168.217.13
reboot

# import repository and refresh
sudo bash
echo "deb http://ppa.launchpad.net/tbfr/zabbix/ubuntu precise main" >> /etc/apt/sources.list.d/zabbix.list
echo "deb-src http://ppa.launchpad.net/tbfr/zabbix/ubuntu precise main" >> /etc/apt/sources.list.d/zabbix.list
exit
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys C407E17D5F76A32B

#########################################
## configure zabbix server
## clone: base zabbix
## hostname: "zserver.ostack.me"
## ip: "xxx.14"
## RAM: 400MB
#########################################

# set host and ip
sudo bash
hostnamectl set-hostname zserver.ostack.me
vim /etc/hosts
> 127.0.1.1    zserver.ostack.me
vim /etc/network/interfaces
> address 192.168.217.14
reboot

# install zabbix server
sudo apt-get install zabbix-server-pgsql zabbix-frontend-php

# create database password
sudo -u postgres psql
> \password
> \q

# allow password login in datbase configuration
sudo vim /etc/postgresql/9.5/main/pg_hba.conf
>> change "peer" to "md5"

# restart db service
sudo systemctl restart postgresql.service
sudo systemctl enable postgresql.service

# create database for zabbix
psql -U postgres
> create user zabbix with password 'myPassword';
> create database zabbix; 
> grant all privileges on database zabbix to zabbix;
> \q 

# import config
zcat /usr/share/zabbix-server-pgsql/schema.sql.gz | psql -U zabbix zabbix
zcat /usr/share/zabbix-server-pgsql/images.sql.gz | psql -U zabbix zabbix
zcat /usr/share/zabbix-server-pgsql/data.sql.gz | psql -U zabbix zabbix

# set db user/password
sudo vim /etc/zabbix/zabbix_server.conf
> DBUser=zabbix
> DBPassword=1234

# some PHP configuration
sudo vim /etc/php/7.0/cli/php.ini
...
post_max_size = 16M
max_execution_time = 300
max_input_time = 300
date.timezone = UTC
...
sudo vim /etc/php/7.0/fpm/php.ini
...
post_max_size = 16M
max_execution_time = 300
max_input_time = 300
date.timezone = UTC
...

# start and enable systemd service
sudo systemctl start zabbix-server
sudo systemctl enable zabbix-server

# check if zabbix is running already
sudo systemctl status zabbix-server

# configure zabbix PHP-based configuration
sudo cp /usr/share/doc/zabbix-frontend-php/examples/zabbix.conf.php.example /etc/zabbix/zabbix.conf.php
sudo vim /etc/zabbix/zabbix.conf.php
...
$DB["TYPE"]                             = 'POSTGRESQL';
$DB['DATABASE'] = 'zabbix';
$DB['USER'] = 'zabbix';
$DB['PASSWORD'] = 'Your.Password.Here'
...

# configure apache2 for zabbix
sudo cp /usr/share/doc/zabbix-frontend-php/examples/apache.conf /etc/apache2/conf-enabled/zabbix.conf
# ensure that alias mode is enabled
sudo a2enmod alias
# enable apache2
sudo systemctl enable apache2
sudo systemctl restart apache2

# check if apache is running
systemctl status apache2.service

# install some php plugins
sudo apt-get install php-bcmath php-mbstring php-xmlwriter php-xmlreader php-pgsql php-mysql

# restart apache
sudo systemctl restart apache2.service

# allow through firewall
sudo ufw reload
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp
sudo ufw allow 10051/tcp
sudo ufw reload

# enable apache php mod
sudo apt-get install php libapache2-mod-php

# finish installing frontend
>>>>>>>> goto http://<hostname>/zabbix

# login
# user: "Admin"
# pass: "zabbix"

Configuration -> Templates -> Create Template (link to Template OS Linux)

#########################################
## INSTALL ZABBIX AGENT ON
## "basedocker.ostack.me"
## "basezabbix.ostack.me"
## "dns.ostack.me"
## "zserver.ostack.me"
#########################################

sudo apt-get update
sudo apt-get install zabbix-agent
sudo vim /etc/zabbix/zabbix_agentd.conf
...
Server=Zabbix.Server.IP.Address
Hostname=Hostname_Of_Current_Machine
...

sudo ufw reload
sudo ufw allow 10050/tcp
sudo ufw reload

sudo systemctl restart zabbix-agent
sudo systemctl enable zabbix-agent

#########################################
## configure base openstack
## clone: base zabbix
## hostname: "baseostack.ostack.me"
## ip: "xxx.15"
#########################################

# set host and ip
sudo bash
hostnamectl set-hostname zserver.ostack.me
vim /etc/hosts
> 127.0.1.1    zserver.ostack.me
vim /etc/network/interfaces
> address 192.168.217.xxx
vim /etc/zabbix/zabbix_agentd.conf
...
Hostname=Hostname_Of_Current_Machine
...
reboot

# install chrony for NTP
sudo apt-get update
sudo apt-get install chrony

# enable chrony services
sudo systemctl restart chrony
sudo systemctl enable chrony

# configure firewall for chrony
sudo ufw reload
sudo ufw allow 123/udp
sudo ufw allow 323/udp
sudo ufw reload

# install openstack stuff
sudo apt-get install software-properties-common
sudo add-apt-repository cloud-archive:newton
sudo apt-get update
sudo apt-get upgrade
sudo apt-get dist-upgrade

# install openstack client
sudo apt-get install python-openstackclient

#########################################
## configure controller node
## clone: base openstack
## hostname: "controller.ostack.me"
## ip: "xxx.16"
## RAM: 2GB
#########################################

# set host and ip
sudo bash
hostnamectl set-hostname zserver.ostack.me
vim /etc/hosts
> 127.0.1.1    zserver.ostack.me
vim /etc/network/interfaces
> address 192.168.217.xxx
vim /etc/zabbix/zabbix_agentd.conf
...
Hostname=Hostname_Of_Current_Machine
...
reboot

# disable ufw since it conflicts with
# bridging and postrouting (ipv4 forwarding)
# set by openstack networking (neutron)
# automatically
sudo ufw disable
sudo systemctl stop ufw
sudo systemctl disable ufw
sudo reboot

# configure chrony for NTP
sudo vim /etc/chrony/chrony.conf
...
allow 192.168.74.0/24
...
sudo systemctl restart chrony

# test chrony
chronyc sources

# install mariadb
sudo apt-get install mariadb-server python-pymysql

# set bind address to private network
sudo vim /etc/mysql/mariadb.conf.d/99-openstack.cnf
...
[mysqld]
bind-address = 0.0.0.0

default-storage-engine = innodb
innodb_file_per_table
max_connections = 4096
collation-server = utf8_general_ci
character-set-server = utf8
...

# enable and restart the service
sudo systemctl restart mysql
sudo systemctl enable mysql

# configure firewall 3306
sudo ufw reload
sudo ufw allow from 192.168.74.0/24 to any port 3306
sudo ufw allow from 127.0.0.0/16 to any port 3306
sudo ufw reload

# install and secure mysql
sudo mysql_secure_installation

# install rabbitmq
# to coordinate operations and status information among services
sudo apt-get install rabbitmq-server

# create user and set password
sudo rabbitmqctl add_user openstack "RABBIT_PASS"

# set permissions for rabbitmq user
sudo rabbitmqctl set_permissions openstack ".*" ".*" ".*"

# open firewall ports for rabbitmq
sudo ufw reload
sudo ufw allow 5672/tcp
sudo ufw reload

# install memcached
# which is used for identity service
sudo apt-get install memcached python-memcache

# change listen ip address to management network
# change -l 127.0.0.1 to
sudo vim /etc/memcached.conf
...
xxx.xxx.xxx.16
...

# enable memcached ports through firewall
sudo ufw reload
sudo ufw allow from 192.168.74.0/24 to any port 11211
sudo ufw reload

# enable and restart memcached service
sudo systemctl restart memcached
sudo systemctl enable memcached

### install identity service
### 5000 and 35357

# prepare database for identity service
sudo mysql -u root -p
> CREATE DATABASE keystone;
> GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'localhost' IDENTIFIED BY 'KEYSTONE_DBPASS';
> GRANT ALL PRIVILEGES ON keystone.* TO 'keystone'@'%' IDENTIFIED BY 'KEYSTONE_DBPASS';
> exit

# install keystone
sudo apt-get install keystone

# edit keystone configuration
sudo vim /etc/keystone/keystone.conf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

[database]
...
connection = mysql+pymysql://keystone:KEYSTONE_DBPASS@controller/keystone

[token]
...
provider = fernet

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# populate identity service database
sudo bash
/bin/sh -c "keystone-manage db_sync" keystone
exit

# initialize fernet repositories
sudo keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone
sudo keystone-manage credential_setup --keystone-user keystone --keystone-group keystone

# allow identity service through firewall
sudo ufw reload
sudo ufw allow 5000/tcp
sudo ufw allow 35357/tcp
sudo ufw reload

# bootstrap identity service
sudo keystone-manage bootstrap --bootstrap-password ADMIN_PASS --bootstrap-admin-url http://controller.ostack.me:35357/v3/ --bootstrap-internal-url http://controller.ostack.me:35357/v3/ --bootstrap-public-url http://controller.ostack.me:5000/v3/ --bootstrap-region-id RegionOne

# configure apache web server
sudo vim /etc/apache2/apache2.conf
...
ServerName controller.ostack.me
...

# enable and restart apache
sudo systemctl restart apache2
sudo systemctl enable apache2
sudo rm -f /var/lib/keystone/keystone.db

# configure environment for keystone
sudo vim /etc/environment
...
OS_USERNAME=admin
OS_PROJECT_NAME=admin
OS_USER_DOMAIN_NAME=Default
OS_PROJECT_DOMAIN_NAME=Default
OS_AUTH_URL=http://controller.ostack.me:35357/v3
OS_IDENTITY_API_VERSION=3
...
# reboot
sudo reboot

# create services, projects, users and roles
sudo openstack project create --os-username admin --domain default --description "Service Project" service
sudo openstack project create --os-username admin --domain default --description "Demo Project" demo
sudo openstack user create --domain default --password-prompt demo
sudo openstack role create user
sudo openstack role add --project demo --user demo user

# disable temporary authentication token mechanism
sudo vim /etc/keystone/keystone-paste.ini
...
>>> remove admin_token_auth from
>>>>>> [pipeline:public_api]
>>>>>> [pipeline:admin_api]
>>>>>> [pipeline:api_v3]
...

# test keystone authentication
sudo openstack --os-auth-url http://controller:35357/v3 --os-project-domain-name Default --os-user-domain-name Default --os-project-name admin --os-username admin token issue
sudo openstack --os-auth-url http://controller:5000/v3 --os-project-domain-name Default --os-user-domain-name Default --os-project-name demo --os-username demo token issue

# create project files
mkdir -p ~/openstack/{admin,demo}
vim ~/openstack/admin/admin-openrc
...
export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=admin
export OS_USERNAME=admin
export OS_AUTH_URL=http://controller:35357/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2
...
vim ~/openstack/demo/demo-openrc
...
export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=demo
export OS_USERNAME=demo
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2
...

# test client scripts
. ~/openstack/admin/admin-openrc
openstack token issue
. ~/openstack/demo/demo-openrc
openstack token issue

#########################################
## >>> baseostack.ostack.me
#########################################

sudo vim /etc/chrony/chrony.conf
... add
server controller.ostack.me iburst
... comment following
pool 2.debian.pool.ntp.org offline iburst
...
sudo systemctl restart chrony

# test chrony
chronyc sources

# create project files
mkdir -p ~/openstack/{admin,demo}
vim ~/openstack/admin/admin-openrc
...
export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=admin
export OS_USERNAME=admin
export OS_AUTH_URL=http://controller:35357/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2
...
vim ~/openstack/demo/demo-openrc
...
export OS_PROJECT_DOMAIN_NAME=Default
export OS_USER_DOMAIN_NAME=Default
export OS_PROJECT_NAME=demo
export OS_USERNAME=demo
export OS_AUTH_URL=http://controller:5000/v3
export OS_IDENTITY_API_VERSION=3
export OS_IMAGE_API_VERSION=2
...

# test client scripts
. ~/openstack/admin/admin-openrc
openstack token issue
. ~/openstack/demo/demo-openrc
openstack token issue

#########################################
## >>> controller.ostack.me
#########################################

### install glance

# setup database for glance
sudo mysql -u root -p
> CREATE DATABASE glance;
> GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'localhost' IDENTIFIED BY 'GLANCE_DBPASS';
> GRANT ALL PRIVILEGES ON glance.* TO 'glance'@'%' IDENTIFIED BY 'GLANCE_DBPASS';
> exit

# load admin profile
. ~/openstack/admin/admin-openrc

# create user for glance
sudo openstack user create --domain default --password-prompt glance

# add user "glance" to project "service" and role "admin"
sudo openstack role add --project service --user glance admin

# create glance service entity
sudo openstack service create --name glance --description "OpenStack Image" image

# create endpoints
sudo openstack endpoint create --region RegionOne image public http://controller.ostack.me:9292
sudo openstack endpoint create --region RegionOne image internal http://controller.ostack.me:9292
sudo openstack endpoint create --region RegionOne image admin http://controller.ostack.me:9292

# allow port through firewall
sudo ufw reload
sudo ufw allow 9292/tcp
sudo ufw reload

# install glance service
sudo apt-get install glance

# configure glance
sudo vim /etc/glance/glance-api.conf
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<< Comment out or remove any other options in the [keystone_authtoken] section.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
[database]
...
connection = mysql+pymysql://glance:GLANCE_DBPASS@controller/glance



<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<



[keystone_authtoken]
...
auth_uri = http://controller:5000
auth_url = http://controller:35357
memcached_servers = controller:11211
auth_type = password
project_domain_name = Default
user_domain_name = Default
project_name = service
username = glance
password = GLANCE_PASS

[paste_deploy]
...
flavor = keystone



<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<



[glance_store]
...
stores = file,http
default_store = file
filesystem_store_datadir = /var/lib/glance/images/

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

# populate glance database
sudo bash
/bin/sh -c "glance-manage db_sync" glance
exit

# start and enable glance services
sudo systemctl restart glance-registry
sudo systemctl restart glance-api
sudo systemctl enable glance-registry
sudo systemctl enable glance-api

# test glance installation
. ~/openstack/admin/admin-openrc
wget http://download.cirros-cloud.net/0.3.4/cirros-0.3.4-x86_64-disk.img

# upload the image to glance service
sudo openstack image create "cirros" --file cirros-0.3.4-x86_64-disk.img --disk-format qcow2 --container-format bare --public

# confirm uploaded image
sudo openstack image list

### install compute service

# initialize database
sudo mysql -u root -p
> CREATE DATABASE nova_api;
> CREATE DATABASE nova;
> GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'localhost' IDENTIFIED BY 'NOVA_DBPASS';
> GRANT ALL PRIVILEGES ON nova_api.* TO 'nova'@'%' IDENTIFIED BY 'NOVA_DBPASS';
> GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'localhost' IDENTIFIED BY 'NOVA_DBPASS';
> GRANT ALL PRIVILEGES ON nova.* TO 'nova'@'%' IDENTIFIED BY 'NOVA_DBPASS';
> exit

# load admin environment
. ~/openstack/admin/admin-openrc

# create nova user
sudo openstack user create --domain default --password-prompt nova

# add admin role to nova user
sudo openstack role add --project service --user nova admin

# create nova service entity
sudo openstack service create --name nova --description "OpenStack Compute" compute

# create nova api endpoints
sudo openstack endpoint create --region RegionOne compute public http://controller:8774/v2.1/%\(tenant_id\)s
sudo openstack endpoint create --region RegionOne compute internal http://controller:8774/v2.1/%\(tenant_id\)s
sudo openstack endpoint create --region RegionOne compute admin http://controller:8774/v2.1/%\(tenant_id\)s

# allow ports through firewall
sudo ufw reload
sudo ufw allow 8774/tcp
sudo ufw allow 8773/tcp
sudo ufw allow 8775/tcp
sudo ufw allow 5900:5999/tcp
sudo ufw allow 6080/tcp
sudo ufw allow 6081/tcp
sudo ufw allow 6082/tcp
sudo ufw reload

# install nova package
sudo apt-get install nova-api nova-conductor nova-consoleauth nova-novncproxy nova-scheduler

# reboot server
sudo reboot

# configure nova
sudo vim /etc/nova/nova.conf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>> Comment out or remove any other options in the [keystone_authtoken] section.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[api_database]
...
connection = mysql+pymysql://nova:NOVA_DBPASS@controller/nova_api

[database]
...
connection = mysql+pymysql://nova:NOVA_DBPASS@controller/nova

[DEFAULT]
...
transport_url = rabbit://openstack:RABBIT_PASS@controller

[DEFAULT]
...
auth_strategy = keystone

[keystone_authtoken]
...
auth_uri = http://controller:5000
auth_url = http://controller:35357
memcached_servers = controller:11211
auth_type = password
project_domain_name = Default
user_domain_name = Default
project_name = service
username = nova
password = NOVA_PASS

[DEFAULT]
...
my_ip = 10.0.0.11

[DEFAULT]
...
use_neutron = True
firewall_driver = nova.virt.firewall.NoopFirewallDriver

[vnc]
...
vncserver_listen = $my_ip
vncserver_proxyclient_address = $my_ip

[glance]
...


[oslo_concurrency]
...
lock_path = /var/lib/nova/tmp



>>> remove log-dir from DEFAULT section


<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# populate nova database
sudo bash
/bin/sh -c "nova-manage api_db sync" nova
/bin/sh -c "nova-manage db sync" nova
exit

# finalize compute installation
sudo systemctl restart nova-api
sudo systemctl restart nova-consoleauth
sudo systemctl restart nova-scheduler
sudo systemctl restart nova-conductor
sudo systemctl restart nova-novncproxy

sudo systemctl enable nova-api
sudo systemctl enable nova-consoleauth
sudo systemctl enable nova-scheduler
sudo systemctl enable nova-conductor
sudo systemctl enable nova-novncproxy

#########################################
## configure base compute node
## clone: base open stack
## hostname: "basecompute.ostack.me"
## RAM: 2GB
## ip: "xxx.17"
#########################################

# set host and ip
sudo bash
hostnamectl set-hostname zserver.ostack.me
vim /etc/hosts
> 127.0.1.1    zserver.ostack.me
vim /etc/network/interfaces
> address 192.168.217.xxx
vim /etc/zabbix/zabbix_agentd.conf
...
Hostname=Hostname_Of_Current_Machine
...
reboot

# disable ufw since it conflicts with
# bridging and postrouting (ipv4 forwarding)
# set by openstack networking (neutron)
# automatically
sudo ufw disable
sudo systemctl stop ufw
sudo systemctl disable ufw
sudo reboot

# install compute package
sudo apt-get install nova-compute

# configure nova compute
sudo vim /etc/nova/nova.conf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>> Comment out or remove any other options in the [keystone_authtoken] section.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[DEFAULT]
...
transport_url = rabbit://openstack:RABBIT_PASS@controller.ostack.me

[DEFAULT]
...
auth_strategy = keystone

[keystone_authtoken]
...
auth_uri = http://controller.ostack.me:5000
auth_url = http://controller.ostack.me:35357
memcached_servers = controller.ostack.me:11211
auth_type = password
project_domain_name = Default
user_domain_name = Default
project_name = service
username = nova
password = NOVA_PASS

[DEFAULT]
...
use_neutron = True
firewall_driver = nova.virt.firewall.NoopFirewallDriver

[vnc]
...
enabled = True
vncserver_listen = 0.0.0.0
vncserver_proxyclient_address = $my_ip
novncproxy_base_url = http://controller.ostack.me:6080/vnc_auto.html

[glance]
...
api_servers = http://controller.ostack.me:9292

[oslo_concurrency]
...
lock_path = /var/lib/nova/tmp



----------> REMOVE log-dir FROM [Default] SECTION


<<<<<<<<<<<<<<<<<<<<<<<<<<<<


# allow ports through firewall
sudo ufw reload
sudo ufw allow 8774/tcp
sudo ufw allow 8773/tcp
sudo ufw allow 8775/tcp
sudo ufw allow 5900:5999/tcp
sudo ufw allow 6080/tcp
sudo ufw allow 6081/tcp
sudo ufw allow 6082/tcp
sudo ufw reload

#########################################
## configure (2) compute nodes (1-2)
## clone: base compute
## hostname: "compute<N>.ostack.me"
## RAM: 2GB
## ip: "xxx.18" - "xxx.19"
#########################################

sudo vim /etc/nova/nova.conf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[DEFAULT]
...
my_ip = MANAGEMENT_INTERFACE_IP_ADDRESS
<<<<<<<<<<<<<<<<<<<<<<<<<<<<

sudo systemctl enable nova-compute
sudo systemctl restart nova-compute

#########################################
## >>> controller.ostack.me
#########################################

# verify operation of compute installation

. ~/openstack/admin/admin-openrc
sudo openstack compute service list

#########################################
## >>> controller.ostack.me
#########################################

### install neutron

# initialize database for neutron
sudo mysql -u root -p
> CREATE DATABASE neutron;
> GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'localhost' IDENTIFIED BY 'NEUTRON_DBPASS';
> GRANT ALL PRIVILEGES ON neutron.* TO 'neutron'@'%' IDENTIFIED BY 'NEUTRON_DBPASS';
> exit

# create service and credentials for neutron
. ~/openstack/admin/admin-openrc
sudo openstack user create --domain default --password-prompt neutron
sudo openstack role add --project service --user neutron admin
sudo openstack service create --name neutron --description "OpenStack Networking" network
sudo openstack endpoint create --region RegionOne network public http://controller.ostack.me:9696
sudo openstack endpoint create --region RegionOne network internal http://controller.ostack.me:9696
sudo openstack endpoint create --region RegionOne network admin http://controller.ostack.me:9696

# open ports in firewall
sudo ufw reload
sudo ufw allow 9696/tcp
sudo ufw reload

#########################################
## >>> controller.ostack.me
## CONFIGURE FOR SELF SERVICE NETWORKS
#########################################

# install required packages
sudo apt-get install neutron-server neutron-plugin-ml2 neutron-linuxbridge-agent neutron-l3-agent neutron-dhcp-agent neutron-metadata-agent

# create configurations
sudo vim /etc/neutron/neutron.conf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>> Comment out or remove any other connection options in the [database] section.
>>> Comment out or remove any other options in the [keystone_authtoken] section.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

[database]
...
connection = mysql+pymysql://neutron:NEUTRON_DBPASS@controller.ostack.me/neutron

[DEFAULT]
...
core_plugin = ml2
service_plugins = router
allow_overlapping_ips = True

[DEFAULT]
...
transport_url = rabbit://openstack:RABBIT_PASS@controller.ostack.me

[DEFAULT]
...
auth_strategy = keystone

[keystone_authtoken]
...
auth_uri = http://controller.ostack.me:5000
auth_url = http://controller.ostack.me:35357
memcached_servers = controller.ostack.me:11211
auth_type = password
project_domain_name = Default
user_domain_name = Default
project_name = service
username = neutron
password = NEUTRON_PASS

[DEFAULT]
...
notify_nova_on_port_status_changes = True
notify_nova_on_port_data_changes = True

[nova]
...
auth_url = http://controller.ostack.me:35357
auth_type = password
project_domain_name = Default
user_domain_name = Default
region_name = RegionOne
project_name = service
username = nova
password = NOVA_PASS

[DEFAULT]
dhcp_lease_duration = 12

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# configure the modular layer 2 (ML2) plugin
sudo vim /etc/neutron/plugins/ml2/ml2_conf.ini
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[ml2]
...
type_drivers = flat,vlan,vxlan

[ml2]
...
tenant_network_types = vxlan

[ml2]
...
mechanism_drivers = linuxbridge,l2population

[ml2]
...
extension_drivers = port_security

[ml2_type_flat]
...
flat_networks = provider

[ml2_type_vxlan]
...
vni_ranges = 1:1000

[securitygroup]
...
enable_ipset = True
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# confiugre linux bridge agent
sudo vim /etc/neutron/plugins/ml2/linuxbridge_agent.ini
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[linux_bridge]
physical_interface_mappings = provider:PROVIDER_INTERFACE_NAME

[vxlan]
enable_vxlan = True
local_ip = OVERLAY_INTERFACE_IP_ADDRESS
l2_population = True

[securitygroup]
...
enable_security_group = True
firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# configure layer 3 agent
# (routing and NAT services)

sudo vim /etc/neutron/l3_agent.ini
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[DEFAULT]
...
interface_driver = neutron.agent.linux.interface.BridgeInterfaceDriver
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

sudo vim /etc/neutron/dhcp_agent.ini
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[DEFAULT]
...
interface_driver = neutron.agent.linux.interface.BridgeInterfaceDriver
dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq
enable_isolated_metadata = True
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# allow dns
sudo ufw reload
sudo ufw allow 53/tcp
sudo ufw allow 53/udp
sudo ufw reload

#########################################
## >>> controller.ostack.me
## CONTINUE CONFIGURING NETWORK SERVICE
#########################################

# configure metadata service

sudo vim /etc/neutron/metadata_agent.ini
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[DEFAULT]
...
nova_metadata_ip = controller
metadata_proxy_shared_secret = METADATA_SECRET
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# configure nova to use metadata service
sudo vim /etc/nova/nova.conf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[neutron]
...
url = http://controller.ostack.me:9696
auth_url = http://controller.ostack.me:35357
auth_type = password
project_domain_name = Default
user_domain_name = Default
region_name = RegionOne
project_name = service
username = neutron
password = NEUTRON_PASS
service_metadata_proxy = True
metadata_proxy_shared_secret = METADATA_SECRET
<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# populate the database
sudo bash
/bin/sh -c "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head" neutron
exit

# allow VXLAN port through firewall
sudo ufw reload
sudo ufw allow 4789/udp
sudo ufw allow 8472/udp
sudo ufw reload

# allow dns port through firewall
sudo ufw reload
sudo ufw allow 53/udp
sudo ufw allow 53/tcp
sudo ufw reload

# allow DHCP port through firewall
sudo ufw reload
sudo ufw allow 67/udp
sudo ufw allow 68/udp
sudo ufw reload

# restart compute API services
sudo systemctl restart nova-api

# enable and restart the services
sudo systemctl restart neutron-server
sudo systemctl restart neutron-linuxbridge-agent
sudo systemctl restart neutron-dhcp-agent
sudo systemctl restart neutron-metadata-agent
sudo systemctl restart neutron-l3-agent

sudo systemctl enable neutron-server
sudo systemctl enable neutron-linuxbridge-agent
sudo systemctl enable service neutron-dhcp-agent
sudo systemctl enable neutron-metadata-agent
sudo systemctl enable neutron-l3-agent

#########################################
## >>> basecompute.ostack.me
## >>> compute1.ostack.me
## >>> compute2.ostack.me
## CONFIGURE BASE COMPUTE FOR NEUTRON
#########################################

sudo apt-get install neutron-linuxbridge-agent

# configure neutron
sudo vim /etc/neutron/neutron.conf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

>>> In the [database] section, comment out any connection options because compute nodes do not directly access the database.
>>> Comment out or remove any other options in the [keystone_authtoken] section.

[DEFAULT]
...
transport_url = rabbit://openstack:RABBIT_PASS@controller.ostack.me

[DEFAULT]
...
auth_strategy = keystone

[keystone_authtoken]
...
auth_uri = http://controller.ostack.me:5000
auth_url = http://controller.ostack.me:35357
memcached_servers = controller.ostack.me:11211
auth_type = password
project_domain_name = Default
user_domain_name = Default
project_name = service
username = neutron
password = NEUTRON_PASS

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# configure linux bridge agent
sudo vim /etc/neutron/plugins/ml2/linuxbridge_agent.ini
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[linux_bridge]
physical_interface_mappings = provider:PROVIDER_INTERFACE_NAME

[vxlan]
enable_vxlan = True
l2_population = True

[securitygroup]
...
enable_security_group = True
firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# configure compute to use neutron service
sudo vim /etc/nova/nova.conf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[neutron]
...
url = http://controller.ostack.me:9696
auth_url = http://controller.ostack.me:35357
auth_type = password
project_domain_name = Default
user_domain_name = Default
region_name = RegionOne
project_name = service
username = neutron
password = NEUTRON_PASS
<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# install lvm tools
sudo apt-get install lvm2

# allow lvm only on sda
sudo vim /etc/lvm/lvm.conf
>>>>>>>>>>>>>>>>>>>>>>>>>>
devices {
...
filter = [ "a/sda/", "r/.*/"]
<<<<<<<<<<<<<<<<<<<<<<<<<<

# allow VXLAN port through firewall
sudo ufw reload
sudo ufw allow 4789/udp
sudo ufw allow 8472/udp
sudo ufw reload

# allow dns port through firewall
sudo ufw reload
sudo ufw allow 53/udp
sudo ufw allow 53/tcp
sudo ufw reload

# allow DHCP port through firewall
sudo ufw reload
sudo ufw allow 67/udp
sudo ufw allow 68/udp
sudo ufw reload

#########################################
## >>> compute1.ostack.me
## >>> compute2.ostack.me
## CONFIGURE COMPUTE NODES FOR NEUTRON
#########################################

# configure linux bridge agent
sudo vim /etc/neutron/plugins/ml2/linuxbridge_agent.ini
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[vxlan]
local_ip = OVERLAY_INTERFACE_IP_ADDRESS

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# enable and restart the services
sudo systemctl restart nova-compute
sudo systemctl restart neutron-linuxbridge-agent

sudo systemctl enable nova-compute
sudo systemctl enable neutron-linuxbridge-agent

#########################################
## >>> controller.ostack.me
## VERIFY NEUTRON CONFIGURATION
#########################################

# load admin credentials
. ~/openstack/admin/admin-openrc

# check neutron extensions
sudo neutron --os-password=<PASSWORD> ext-list

# verify self service networks
sudo openstack network agent list

>>>>>>>>>>>>> OUTPUT <<<<<<<<<<<<<<<
+--------------------------------------+--------------------+------------+-------------------+-------+-------+---------------------------+
| ID                                   | Agent Type         | Host       | Availability Zone | Alive | State | Binary                    |
+--------------------------------------+--------------------+------------+-------------------+-------+-------+---------------------------+
| f49a4b81-afd6-4b3d-b923-66c8f0517099 | Metadata agent     | controller | None              | True  | UP    | neutron-metadata-agent    |
| 27eee952-a748-467b-bf71-941e89846a92 | Linux bridge agent | controller | None              | True  | UP    | neutron-linuxbridge-agent |
| 08905043-5010-4b87-bba5-aedb1956e27a | Linux bridge agent | compute1   | None              | True  | UP    | neutron-linuxbridge-agent |
| 830344ff-dc36-4956-84f4-067af667a0dc | L3 agent           | controller | nova              | True  | UP    | neutron-l3-agent          |
| dd3644c9-1a3a-435a-9282-eb306b4b0391 | DHCP agent         | controller | nova              | True  | UP    | neutron-dhcp-agent        |
+--------------------------------------+--------------------+------------+-------------------+-------+-------+---------------------------+
>>>>>>>>>>>>> OUTPUT <<<<<<<<<<<<<<<

#########################################
## >>> controller.ostack.me
## INSTALL DASHBOARD (horizon)
#########################################

sudo apt-get install openstack-dashboard

# setup configuration
sudo vim /etc/openstack-dashboard/local_settings.py
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

> set host
OPENSTACK_HOST = "controller.ostack.me"

> allow all hosts
ALLOWED_HOSTS = ['*', ]

> configure memcached
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'

CACHES = {
    'default': {
         'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
         'LOCATION': 'controller.ostack.me:11211',
    }
}

> enable identity API v3
OPENSTACK_KEYSTONE_URL = "http://%s:5000/v3" % OPENSTACK_HOST

> enable support for domains
OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True

> configure API version
OPENSTACK_API_VERSIONS = {
    "identity": 3,
    "image": 2,
    "volume": 2,
}

> configure default as the domain for new users
OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = "default"

> configure user as the default role for new users
OPENSTACK_KEYSTONE_DEFAULT_ROLE = "user"

> configure time zone
> https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
TIME_ZONE = "Asia/Tehran"

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# finalize installation
sudo systemctl restart apache2
sudo systemctl enable apache2

# enable ports throgh firewall
sudo ufw reload
sudo ufw allow 80/tcp
sudo ufw reload

# verify horizon installation
>>>>>> OPEN http://controller.ostack.me/horizon/ in browser
>> domain: "default"
>> username: "admin"
>> password

#########################################
## HORIZON BUGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG
## Truncated or oversized response headers received from daemon process 'horizon': /usr/share/openstack-dashboard/openstack_dashboard/wsgi/django.wsgi
#########################################

sudo vim /etc/apache2/conf-available/openstack-dashboard.conf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

> Add following line
WSGIApplicationGroup %{GLOBAL}

> Remove following line
WSGIProcessGroup horizon

> Remove following line
  Order allow,deny
  Allow from all

> Add following line
        Require all granted

> Remove following line
WSGIDaemonProcess horizon user=horizon group=horizon processes=3 threads=10 display-name=%{GROUP}

> Add following line
WSGIDaemonProcess horizon user=horizon group=horizon processes=3 threads=10 graceful-timeout=120 display-name=%{GROUP} 

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
sudo systemctl restart apache2

#########################################
## >>> controller.ostack.me
## INSTALL CINDER (Block Storage Service)
#########################################

# configure database
sudo mysql -u root -p
> CREATE DATABASE cinder;
> GRANT ALL PRIVILEGES ON cinder.* TO 'cinder'@'localhost' IDENTIFIED BY 'CINDER_DBPASS';
> GRANT ALL PRIVILEGES ON cinder.* TO 'cinder'@'%' IDENTIFIED BY 'CINDER_DBPASS';
> exit

# load admin credentials
. ~/openstack/admin/admin-openrc

# create a cinder user
sudo openstack user create --domain default --password-prompt cinder

# add "admin" role to cinder user
sudo openstack role add --project service --user cinder admin

# create "cinder" and "cinderv2" service entities
sudo openstack service create --name cinder --description "OpenStack Block Storage" volume
sudo openstack service create --name cinderv2 --description "OpenStack Block Storage" volumev2

# create API endpoints
sudo openstack endpoint create --region RegionOne volume public http://controller:8776/v1/%\(tenant_id\)s
sudo openstack endpoint create --region RegionOne volume internal http://controller:8776/v1/%\(tenant_id\)s
sudo openstack endpoint create --region RegionOne volume admin http://controller:8776/v1/%\(tenant_id\)s
sudo openstack endpoint create --region RegionOne volumev2 public http://controller:8776/v2/%\(tenant_id\)s
sudo openstack endpoint create --region RegionOne volumev2 internal http://controller:8776/v2/%\(tenant_id\)s
sudo openstack endpoint create --region RegionOne volumev2 admin http://controller:8776/v2/%\(tenant_id\)s

# allow port through firewall
sudo ufw reload
sudo ufw allow 8776/tcp
sudo ufw reload

# install cinder packages
sudo apt-get install cinder-api cinder-scheduler

# create configuration
sudo vim /etc/cinder/cinder.conf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

> Comment out or remove any other options in the [keystone_authtoken] section.

[database]
...
connection = mysql+pymysql://cinder:CINDER_DBPASS@controller.ostack.me/cinder

[DEFAULT]
...
transport_url = rabbit://openstack:RABBIT_PASS@controller.ostack.me

[DEFAULT]
...
auth_strategy = keystone

[keystone_authtoken]
...
auth_uri = http://controller.ostack.me:5000
auth_url = http://controller.ostack.me:35357
memcached_servers = controller.ostack.me:11211
auth_type = password
project_domain_name = Default
user_domain_name = Default
project_name = service
username = cinder
password = CINDER_PASS

[DEFAULT]
...
my_ip = <MANAGEMENT IP ADDRESS>


<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# populate the database

sudo bash 
/bin/sh -c "cinder-manage db sync" cinder
exit

# configure compute to use block storage
sudo vim /etc/nova/nova.conf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[cinder]
os_region_name = RegionOne
<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# restart compute API service
sudo systemctl restart nova-api

# enable and restart block storage service
sudo systemctl restart cinder-scheduler
sudo systemctl restart cinder-api 
sudo systemctl enable cinder-scheduler
sudo systemctl enable cinder-api 

#########################################
## CHOICE::::::::: LVM
## ----> ADD A NEW HARD DISK
## configure base cinder node
## clone: base open stack
## hostname: "basecinder.ostack.me"
## RAM: 1GB
## ip: "xxx.20"
#########################################

# set host and ip
sudo bash
hostnamectl set-hostname zserver.ostack.me
vim /etc/hosts
> 127.0.1.1    zserver.ostack.me
vim /etc/network/interfaces
> address 192.168.217.xxx
vim /etc/zabbix/zabbix_agentd.conf
...
Hostname=Hostname_Of_Current_Machine
...
reboot

# install lvm tools
sudo apt-get install lvm2

# allow lvm only on sda/sdb
sudo vim /etc/lvm/lvm.conf
>>>>>>>>>>>>>>>>>>>>>>>>>>
devices {
...
filter = [ "a/sda/", "a/sdb/", "r/.*/"]
<<<<<<<<<<<<<<<<<<<<<<<<<<

# reboot for lvm settings to take effect
sudo reboot

# create LVM physical volume
sudo pvcreate /dev/sdb

# create volume group
sudo vgcreate cinder-volumes /dev/sdb

# install cinder package
sudo apt-get install cinder-volume

# reboot system
sudo reboot

# create configuration
sudo vim /etc/cinder/cinder.conf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

> Comment out or remove any other options in the [keystone_authtoken] section.

[database]
...
connection = mysql+pymysql://cinder:CINDER_DBPASS@controller.ostack.me/cinder

[DEFAULT]
...
transport_url = rabbit://openstack:RABBIT_PASS@controller.ostack.me

[DEFAULT]
...
auth_strategy = keystone

[keystone_authtoken]
...
auth_uri = http://controller.ostack.me:5000
auth_url = http://controller.ostack.me:35357
memcached_servers = controller.ostack.me:11211
auth_type = password
project_domain_name = Default
user_domain_name = Default
project_name = service
username = cinder
password = CINDER_PASS

[lvm]
...
volume_driver = cinder.volume.drivers.lvm.LVMVolumeDriver
volume_group = cinder-volumes
iscsi_protocol = iscsi
iscsi_helper = tgtadm

[DEFAULT]
...
enabled_backends = lvm

[DEFAULT]
...
glance_api_servers = http://controller.ostack.me:9292

[oslo_concurrency]
...
lock_path = /var/lib/cinder/tmp
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# allow port through firewall
sudo ufw reload
sudo ufw allow 8776/tcp
sudo ufw reload

#########################################
## CHOICE::::::::: LVM
## "cinder1.ostack.me"
## "cinder2.ostack.me"
## clone basecinder
## RAM: 1GB
## ip: "xxx.21" - "xxx.22"
#########################################

# set host and ip
sudo bash
hostnamectl set-hostname zserver.ostack.me
vim /etc/hosts
> 127.0.1.1    zserver.ostack.me
vim /etc/network/interfaces
> address 192.168.217.xxx
vim /etc/zabbix/zabbix_agentd.conf
...
Hostname=Hostname_Of_Current_Machine
...
reboot

# create configuration
sudo vim /etc/cinder/cinder.conf
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
[DEFAULT]
...
my_ip = MANAGEMENT_INTERFACE_IP_ADDRESS
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

# enable and start services
sudo systemctl restart tgt
sudo systemctl restart cinder-volume
sudo systemctl enable tgt
sudo systemctl enable cinder-volume

#########################################
## >>> controller.ostack.me
## verify cinder installation
#########################################

# load environment
. ~/openstack/admin/admin-openrc

# view services
sudo openstack volume service list

>>>>>>>>>>>>>>>> OUTPUT <<<<<<<<<<<<<<<<

+------------------+------------+------+---------+-------+----------------------------+
| Binary           | Host       | Zone | Status  | State | Updated_at                 |
+------------------+------------+------+---------+-------+----------------------------+
| cinder-scheduler | controller | nova | enabled | up    | 2016-09-30T02:27:41.000000 |
| cinder-volume    | block@lvm  | nova | enabled | up    | 2016-09-30T02:27:46.000000 |
+------------------+------------+------+---------+-------+----------------------------+

>>>>>>>>>>>>>>>> OUTPUT <<<<<<<<<<<<<<<<

#########################################
## >>> controller.ostack.me
## LAUNCH INSTANCE
#########################################

# load admin environment
. ~/openstack/admin/admin-openrc

##### configure provider network first

# create a virtual network
sudo openstack network create  --share --provider-physical-network provider --provider-network-type flat provider

# create subnet on new network
sudo openstack subnet create --network provider --allocation-pool start=START_IP_ADDRESS,end=END_IP_ADDRESS --dns-nameserver DNS_RESOLVER --gateway PROVIDER_NETWORK_GATEWAY --subnet-range PROVIDER_NETWORK_CIDR provider

>>>>>>>>>>>>>>> EXAMPLE <<<<<<<<<<<<<<<
sudo openstack subnet create --network provider --allocation-pool start=192.168.98.100,end=192.168.98.254 --dns-nameserver 4.2.2.4 --gateway 192.168.98.1 --subnet-range 192.168.98.0/24 provider
>>>>>>>>>>>>>>> EXAMPLE <<<<<<<<<<<<<<<

##### configure self service network

# load demo project environment
. ~/openstack/demo/demo-openrc

# create a new network
sudo openstack network create selfservice

# assign subnet to network
sudo openstack subnet create --network selfservice --dns-nameserver DNS_RESOLVER --gateway SELFSERVICE_NETWORK_GATEWAY --subnet-range SELFSERVICE_NETWORK_CIDR selfservice

>>>>>>>>>>>>>>> EXAMPLE <<<<<<<<<<<<<<<
sudo openstack subnet create --network selfservice --dns-nameserver 4.2.2.4 --gateway 192.168.99.1 --subnet-range 192.168.99.0/24 selfservice
>>>>>>>>>>>>>>> EXAMPLE <<<<<<<<<<<<<<<

# make provider network routable
. ~/openstack/admin/admin-openrc
sudo neutron net-update provider --router:external --os-password <PASSWORD>
. ~/openstack/demo/demo-openrc

# create a new router
sudo openstack router create router

# add self service network as interface of router
sudo neutron router-interface-add router selfservice --os-password <PASSWORD>

# set gateway on provider network on router
sudo neutron router-gateway-set router provider --os-password <PASSWORD>

##### verify operations

# load admin environment
. ~/openstack/admin/admin-openrc

# verify network namespaces
sudo ip netns
>>>>>>>>>>>>>>> EXAMPLE <<<<<<<<<<<<<<<
qrouter-89dd2083-a160-4d75-ab3a-14239f01ea0b
qdhcp-7c6f9b37-76b4-463e-98d8-27e5686ed083
qdhcp-0e62efcd-8cee-46c7-b163-d8df05c3c5ad
>>>>>>>>>>>>>>> EXAMPLE <<<<<<<<<<<<<<<

# List ports on the router to determine the gateway IP address on the provider network
sudo neutron router-port-list router --os-password <PASSWORD>

>>>>>>>>>>>>>>> EXAMPLE <<<<<<<<<<<<<<<
+--------------------------------------+------+-------------------+------------------------------------------+
| id                                   | name | mac_address       | fixed_ips                                |
+--------------------------------------+------+-------------------+------------------------------------------+
| bff6605d-824c-41f9-b744-21d128fc86e1 |      | fa:16:3e:2f:34:9b | {"subnet_id":                            |
|                                      |      |                   | "3482f524-8bff-4871-80d4-5774c2730728",  |
|                                      |      |                   | "ip_address": "172.16.1.1"}              |
| d6fe98db-ae01-42b0-a860-37b1661f5950 |      | fa:16:3e:e8:c1:41 | {"subnet_id":                            |
|                                      |      |                   | "5cc70da8-4ee7-4565-be53-b9c011fca011",  |
|                                      |      |                   | "ip_address": "203.0.113.102"}           |
+--------------------------------------+------+-------------------+------------------------------------------+
>>>>>>>>>>>>>>> EXAMPLE <<<<<<<<<<<<<<<

# ping the router on the provider network
ping -c 4 203.0.113.102

##### continue configuring to launch

# create flavor
sudo openstack flavor create --id 0 --vcpus 1 --ram 64 --disk 1 m1.nano

# generate ssh key for demo project
. ~/openstack/demo/demo-openrc
ssh-keygen -q -N ""
sudo openstack keypair create --public-key ~/.ssh/id_rsa.pub mykey
sudo openstack keypair list
. ~/openstack/admin/admin-openrc

# add some important security rules to "default" security group
sudo openstack security group rule create --proto icmp default
sudo openstack security group rule create --proto tcp --dst-port 22 default
sudo openstack security group rule create --proto udp --dst-port 68 default

##### launch instance

# load demo project environment
. ~/openstack/demo/demo-openrc

# list available flavors
sudo openstack flavor list

# list available images
sudo openstack image list

# list available networks
sudo openstack network list

# list available security groups
sudo openstack security group list

# list available keys
sudo openstack keypair list

# launch the instance
sudo openstack server create --flavor m1.nano --image cirros --nic net-id=SELFSERVICE_NET_ID --security-group default --key-name mykey selfservice-instance

# check status of instance
sudo openstack server list

# cirros
# cubswin:)

#########################################
## configure gateway for provider networks
## clone: base zabbix
## hostname: "gw.ostack.me"
## RAM: 256MB
## ip: "xxx.23"
#########################################

# set host and ip
sudo bash
hostnamectl set-hostname gw.ostack.me
vim /etc/hosts
> 127.0.1.1    gw.ostack.me
vim /etc/network/interfaces
> address xxx.xxx.xxx.23
vim /etc/zabbix/zabbix_agentd.conf
...
Hostname=Hostname_Of_Current_Machine
...
reboot

# add additional ip to ens33
sudo vim /etc/network/interfaces
...
auto ens33:0
iface ens33:0 inet static
	address 192.168.200.1
	netmask 255.255.255.0
	network 192.168.200.0
	broadcast 192.168.200.255
...
sudo reboot

# verify ip address has been added
sudo ip addr show

# enable FORWARDing in ufw firewall
sudo vim /etc/default/ufw 
> DEFAULT_FORWARD_POLICY="ACCEPT"

# enable ufw ipv4 port forwarding
sudo vim /etc/ufw/sysctl.conf 
> net.ipv4.ip_forward=1

# setup NAT in ufw
sudo vim /etc/ufw/before.rules
> # add before *filter rules! top of file
> # add before *filter rules! top of file
> # add before *filter rules! top of file
> # add before *filter rules! top of file
> # NAT table rules
> *nat
> :POSTROUTING ACCEPT [0:0]
>
> # Forward traffic through eth0 - Change to match you out-interface
> -A POSTROUTING -s 192.168.74.0/24 -o ens33 -j MASQUERADE
>
> # don't delete the 'COMMIT' line or these nat table rules won't
> # be processed
> COMMIT

# force restart ufw
sudo ufw disable
sudo ufw enable

# verify masquerade is set
sudo iptables -t nat -L -v


























