#######################################################################
Installation (easy) method via pip
NOTE: NO UDP RELAY SUPPORTED
#######################################################################

# install shadow socks
sudo pip install shadowsocks

#######################################################################
Installation (source-code) method via git
UDP RELAY IS SUPPORTED
#######################################################################

# installation of pre-requisities
###################################
###### CENTOS
yum install epel-release -y
yum install git gcc gettext autoconf libtool automake make pcre-devel asciidoc xmlto c-ares-devel libev-devel -y
###### UBUNTU/DEBIAN
sudo apt-get install --no-install-recommends git gettext build-essential autoconf libtool libpcre3-dev asciidoc xmlto libev-dev libc-ares-dev automake
###################################

# clone source code
cd /usr/local/src
git clone https://github.com/shadowsocks/shadowsocks-libev.git
cd shadowsocks-libev

# find-out recent tag
git tag -l

# checkout specific tag
git checkout tags/v3.1.1 -b toinstall

# install submodules
git submodule update --init --recursive

# Installation of Libsodium
cd /usr/local/src
export LIBSODIUM_VER=1.0.13
wget https://download.libsodium.org/libsodium/releases/libsodium-$LIBSODIUM_VER.tar.gz
tar xvf libsodium-$LIBSODIUM_VER.tar.gz
pushd libsodium-$LIBSODIUM_VER
./configure --prefix=/usr && make
sudo make install
popd
sudo ldconfig

# Installation of MbedTLS
cd /usr/local/src
export MBEDTLS_VER=2.6.0
wget https://tls.mbed.org/download/mbedtls-$MBEDTLS_VER-gpl.tgz
tar xvf mbedtls-$MBEDTLS_VER-gpl.tgz
pushd mbedtls-$MBEDTLS_VER
make SHARED=1 CFLAGS=-fPIC
sudo make DESTDIR=/usr install
popd
sudo ldconfig

# build
cd /usr/local/src/shadowsocks-libev
./autogen.sh && ./configure && make

# install
sudo make install

#######################################################################
END INSTALLATION
#######################################################################

# create configuration
sudo vim /etc/shadowsocks-aes-256-cfb.json
..............................
{
  "server":"178.162.203.161",
  "server_port":8000,
  "local_port":1080,
  "password":"<PASSWORD>",
  "timeout":600,
  "method":"aes-256-cfb"
}
..............................
sudo vim /etc/shadowsocks-chacha20.json
..............................
{
  "server":"178.162.203.161",
  "server_port":3000,
  "local_port":1081,
  "password":"<PASSWORD>",
  "timeout":600,
  "method":"chacha20"
}
..............................
sudo vim /etc/shadowsocks-chacha20-ietf-poly1305.json
..............................
{
  "server":"178.162.203.161",
  "server_port":4500,
  "local_port":1081,
  "password":"<PASSWORD>",
  "timeout":600,
  "method":"chacha20-ietf-poly1305"
}
..............................
sudo vim /etc/shadowsocks-salsa20.json
..............................
{
  "server":"178.162.203.161",
  "server_port":4000,
  "local_port":1082,
  "password":"<PASSWORD>",
  "timeout":600,
  "method":"salsa20"
}
..............................

# create systemd service
sudo vim /etc/systemd/system/shadowsocks-server@.service

#######################################################################
CHOICE1: EASY INSTALLATION
#######################################################################
...............................
[Unit]
Description=Shadowsocks Server
After=network.target

[Service]
ExecStart=/usr/bin/ssserver -c /etc/shadowsocks-%i.json
Restart=on-abort

[Install]
WantedBy=multi-user.target
...............................
#######################################################################
CHOICE2: SOURCE INSTALLATION
#######################################################################
...............................
[Unit]
Description=Shadowsocks Server %i
After=network.target

[Service]
Type=forking
PIDFile=/var/run/ss-server-%i.pid
ExecStart=/usr/local/bin/ss-server -c /etc/shadowsocks-%i.json -u -v -f /var/run/ss-server-%i.pid
Restart=on-abort

[Install]
WantedBy=multi-user.target
...............................
#######################################################################
END CHOICE
#######################################################################

# enable and start service
sudo systemctl daemon-reload

sudo systemctl restart shadowsocks-server@aes-256-cfb.service
sudo systemctl enable shadowsocks-server@aes-256-cfb.service
sudo systemctl status shadowsocks-server@aes-256-cfb.service

sudo systemctl restart shadowsocks-server@chacha20.service
sudo systemctl enable shadowsocks-server@chacha20.service
sudo systemctl status shadowsocks-server@chacha20.service

sudo systemctl restart shadowsocks-server@chacha20-ietf-poly1305.service
sudo systemctl enable shadowsocks-server@chacha20-ietf-poly1305.service
sudo systemctl status shadowsocks-server@chacha20-ietf-poly1305.service

sudo systemctl restart shadowsocks-server@salsa20.service
sudo systemctl enable shadowsocks-server@salsa20.service
sudo systemctl status shadowsocks-server@salsa20.service

# open port in firewall
sudo firewall-cmd --reload
sudo firewall-cmd --permanent --add-port=8000/tcp
sudo firewall-cmd --permanent --add-port=8000/udp
sudo firewall-cmd --permanent --add-port=3000/tcp
sudo firewall-cmd --permanent --add-port=3000/udp
sudo firewall-cmd --permanent --add-port=4000/tcp
sudo firewall-cmd --permanent --add-port=4000/udp
sudo firewall-cmd --permanent --add-port=4500/tcp
sudo firewall-cmd --permanent --add-port=4500/udp

sudo firewall-cmd --reload

# protect against brute forcers
# create a fail2ban filter
sudo vim /etc/fail2ban/filter.d/shadowsocks.conf
#######################################################################
CHOICE1: EASY INSTALLATION
#######################################################################
...................................................
[Definition]

_daemon = ssserver
failregex = can not parse header when handling connection from <HOST>:\d{1,5}$

ignoreregex =
...................................................
#######################################################################
CHOICE2: SOURCE INSTALLATION
#######################################################################
...................................................
[Definition]

_daemon = /usr/local/bin/ss-server
failregex = failed to handshake with <HOST>: invalid (host name|adddress type).*$

ignoreregex =
...................................................
#######################################################################
END CHOICE
#######################################################################

# create a fail2ban jail
sudo vim /etc/fail2ban/jail.conf
...................................................
[shadowsocks]

enabled  = true
filter   = shadowsocks
backend  = systemd
maxretry = 3
...................................................

# restart fail2ban
sudo systemctl restart fail2ban.service
sudo systemctl status fail2ban.service

# view jails
sudo fail2ban-client status
sudo fail2ban-client status shadowsocks

#######################################################################
Linux Client Configuration
#######################################################################

# create configuration
vim ~/.config/shadowsocks.json

..............................
{
  "server":"178.162.203.161",
  "server_port":8000,
  "local_port":1080,
  "password":"<PASSWORD>",
  "timeout":600,
  "method":"aes-256-cfb"
}
..............................


# start proxy
sslocal -c ~/.config/shadowsocks.json

################################################
## ALTERNATIVE USE SYSTEMD
################################################

sudo vim /etc/sysconfig/shadowsocks-aes-256-cfb.json
..............................
{
  "server":"ssserver.ucoder.ir",
  "server_port":8000,
  "local_port":1080,
  "password":"<PASSWORD>",
  "timeout":600,
  "method":"aes-256-cfb"
}
..............................

sudo vim /etc/sysconfig/shadowsocks-chacha20.json
..............................
{
  "server":"ssserver.ucoder.ir",
  "server_port":3000,
  "local_port":1080,
  "password":"<PASSWORD>",
  "timeout":600,
  "method":"chacha20"
}
..............................

sudo vim /etc/sysconfig/shadowsocks-salsa20.json
..............................
{
  "server":"ssserver.ucoder.ir",
  "server_port":4000,
  "local_port":1080,
  "password":"<PASSWORD>",
  "timeout":600,
  "method":"salsa20"
}
..............................

sudo ln -s /etc/shadowsocks-salsa20.json /etc/shadowsocks.json

# create systemd service
sudo vim /etc/systemd/system/shadowsocks-client.service

...............................
[Unit]
Description=Shadowsocks Client
After=network.target

[Service]
ExecStart=/usr/local/bin/sslocal -c /etc/sysconfig/shadowsocks.json
Restart=on-abort

[Install]
WantedBy=multi-user.target
...............................
...............................
[Unit]
Description=Shadowsocks Client
After=network.target

[Service]
Type=forking
PIDFile=/var/run/ss-local.pid
ExecStart=/usr/local/bin/ss-local -c /etc/shadowsocks.json -u -v -f /var/run/ss-local.pid
Restart=on-abort

[Install]
WantedBy=multi-user.target
...............................

# enable and start service
sudo systemctl daemon-reload
sudo systemctl restart shadowsocks-client
sudo systemctl enable shadowsocks-client
sudo systemctl status shadowsocks-client

################################################

# install haveged to increase entropy
sudo apt-get install haveged
sudo systemctl restart haveged
sudo systemctl enable haveged
sudo systemctl status haveged

# install privoxy
||| sudo yum install privoxy
||| sudo apt-get install privoxy

# configure privoxy
sudo vim /etc/privoxy/config
>>>>>>>>>>>>>>>
# search below, duplicate
# listen-address will cause
# privoxy to fail
listen-address		0.0.0.0:8118


forward-socks5	/	127.0.0.1:1080	.
forward         192.168.*.*/     .
forward         192.168.*.*:*/     .
forward            10.*.*.*/     .
forward            10.*.*.*:*/     .
forward           127.*.*.*/     .
forward           127.*.*.*:*/     .
forward           172.*.*.*/     .
forward           172.*.*.*:*/     .
<<<<<<<<<<<<<<<

# enable and start privoxy services
sudo systemctl restart privoxy
sudo systemctl enable privoxy
sudo systemctl status privoxy

# tell sudo to keep proxy config
sudo visudo
.................
Defaults    env_keep += "http_proxy HTTP_PROXY https_proxy HTTPS_PROXY socks_proxy SOCKS_PROXY no_proxy NO_PROXY all_proxy ALL_PROXY"
.................

# create a source script to set environments
vim ~/proxy.source
.................
export http_proxy="http://127.0.0.1:8118/"
export HTTP_PROXY=$http_proxy
export https_proxy=$http_proxy
export HTTPS_PROXY=$http_proxy
export socks_proxy="socks5://127.0.0.1:1080/"
export SOCKS_PROXY=$socks_proxy
export no_proxy="localhost,127.0.0.0/8,::1,192.168.0.0/16,10.0.0.0/8,172.0.0.0/8,$no_proxy"
export NO_PROXY=$no_proxy
export all_proxy=$socks_proxy
export ALL_PROXY=$all_proxy
.................

# create a source script to un-set environments
vim ~/no-proxy.source
.................
unset http_proxy
unset HTTP_PROXY
unset https_proxy
unset HTTPS_PROXY
unset socks_proxy
unset SOCKS_PROXY
unset no_proxy
unset NO_PROXY
unset all_proxy
unset ALL_PROXY
.................

# bash should load proxy
vim ~/.bashrc
......................
source $HOME/proxy.source
......................

########################################################
########################################################

# load proxy environment
source ~/proxy.source


# load no proxy environment
source ~/no-proxy.source

########################################################
Install simple-obfs Server
########################################################

# install requirements
sudo yum install gcc autoconf libtool automake make zlib-devel openssl-devel asciidoc xmlto

# compile and install
cd /usr/local/src
sudo git clone https://github.com/shadowsocks/simple-obfs.git
cd simple-obfs
sudo git submodule update --init --recursive
sudo ./autogen.sh
sudo ./configure
sudo make
sudo make install

# create config
sudo vim /etc/shadowsocks-chacha20-ietf-poly1305-simple-obfs.json
..............................
{
  "server":"178.162.203.161",
  "server_port":4700,
  "local_port":1081,
  "password":"<PASSWORD>",
  "timeout":600,
  "method":"chacha20-ietf-poly1305",
  "plugin":"obfs-server",
  "plugin_opts":"obfs=http"
}
..............................

# enable and start services
sudo systemctl restart shadowsocks-server@chacha20-ietf-poly1305-simple-obfs.service
sudo systemctl enable shadowsocks-server@chacha20-ietf-poly1305-simple-obfs.service
sudo systemctl status shadowsocks-server@chacha20-ietf-poly1305-simple-obfs.service

# open ports through firewall
sudo firewall-cmd --reload
sudo firewall-cmd --permanent --add-port=4700/tcp
sudo firewall-cmd --permanent --add-port=4700/udp
sudo firewall-cmd --reload

########################################################
Install simple-obfs Client
########################################################

# install requirements
sudo apt-get install --no-install-recommends build-essential autoconf libtool libssl-dev libpcre3-dev libev-dev asciidoc xmlto automake

# compile and install
cd /usr/local/src
sudo git clone https://github.com/shadowsocks/simple-obfs.git
cd simple-obfs
sudo git submodule update --init --recursive
sudo ./autogen.sh
sudo ./configure
sudo make
sudo make install

# create config
sudo vim /etc/shadowsocks-chacha20-ietf-poly1305-simple-obfs.json
..............................
{
  "server":"ssserver.ucoder.ir",
  "server_port":4700,
  "local_port":1081,
  "password":"<PASSWORD>",
  "timeout":600,
  "method":"chacha20-ietf-poly1305",
  "plugin":"obfs-local",
  "plugin_opts":"obfs=http;obfs-host=www.microsoft.com"
}
..............................

########################################################
Install simple-obfs Client (Android)
########################################################

# search google play for "obfs" or "Simple Obfuscation"
# which acts as a plugin for shadowsocks

########################################################
Install OpenVPN (to be used accross shadowsocks)
########################################################

# initialize openvpn
docker volume create --name "ovpn-udp-data"
docker run -v "ovpn-udp-data":/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u udp://opn.ucoder.ir
docker run -v "ovpn-udp-data":/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki

# run openvpn
docker run -v "ovpn-udp-data":/etc/openvpn -td -p 2000:1194/udp --cap-add=NET_ADMIN --restart=always --name=ovpn-udp kylemanna/openvpn

# generate client id without pass
docker run -v "ovpn-udp-data":/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full arcana nopass

# retrieve client configuration
docker run -v "ovpn-udp-data":/etc/openvpn --rm kylemanna/openvpn ovpn_getclient arcana > arcana-udp.ovpn

# open port through firewall
sudo firewall-cmd --reload
sudo firewall-cmd --permanent --add-port=2000/udp
sudo firewall-cmd --reload


########################################################
Install OpenVPN (TCP) (to be used accross shadowsocks)
########################################################

# initialize openvpn
docker volume create --name "ovpn-tcp-data"
docker run -v "ovpn-tcp-data":/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u tcp://opn.ucoder.ir
docker run -v "ovpn-tcp-data":/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki

# run openvpn
docker run -v "ovpn-tcp-data":/etc/openvpn -td -p 2000:1194/tcp --cap-add=NET_ADMIN --restart=always --name=ovpn-tcp kylemanna/openvpn

# generate client id without pass
docker run -v "ovpn-tcp-data":/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full arcana nopass

# retrieve client configuration
docker run -v "ovpn-tcp-data":/etc/openvpn --rm kylemanna/openvpn ovpn_getclient arcana > arcana-tcp.ovpn

# open port through firewall
sudo firewall-cmd --reload
sudo firewall-cmd --permanent --add-port=2000/tcp
sudo firewall-cmd --reload


########################################################
Connect to OpenVPN over Shadowsocks
########################################################

# modify ovpn file to access it over shadowsocks
.....................................
socks-proxy 127.0.0.1 1080
route SHADOWSOCKS_SERVER_IP 255.255.255.255 <GATEWAY>
script-security 2                                                                                                       
dhcp-option DNS 4.2.2.4
dhcp-option DOMAIN arcana.me

# Only on ubuntu client, you also need following directives:                                                              
up /etc/openvpn/update-resolv-conf                                                                                      
down /etc/openvpn/update-resolv-conf  
.....................................

# ensure these packages are installed on client
sudo apt-get install network-manager-openvpn-gnome

# ensure some firewall ports are open
sudo ufw reload
sudo ufw allow 1194/tcp
sudo ufw allow 1194/udp
sudo ufw allow 1080/tcp
sudo ufw allow 1080/udp
sudo ufw reload

########################################################
Optimizing Shadow Socks
########################################################

# max open files
fs.file-max = 51200
# max read buffer
net.core.rmem_max = 67108864
# max write buffer
net.core.wmem_max = 67108864
# default read buffer
net.core.rmem_default = 65536
# default write buffer
net.core.wmem_default = 65536
# max processor input queue
net.core.netdev_max_backlog = 4096
# max backlog
net.core.somaxconn = 4096

# resist SYN flood attacks
net.ipv4.tcp_syncookies = 1
# reuse timewait sockets when safe
net.ipv4.tcp_tw_reuse = 1
# turn off fast timewait sockets recycling
net.ipv4.tcp_tw_recycle = 0
# short FIN timeout
net.ipv4.tcp_fin_timeout = 30
# short keepalive time
net.ipv4.tcp_keepalive_time = 1200
# outbound port range
net.ipv4.ip_local_port_range = 10000 65000
# max SYN backlog
net.ipv4.tcp_max_syn_backlog = 4096
# max timewait sockets held by system simultaneously
net.ipv4.tcp_max_tw_buckets = 5000
# turn on TCP Fast Open on both client and server side
net.ipv4.tcp_fastopen = 3
# TCP receive buffer
net.ipv4.tcp_rmem = 4096 87380 67108864
# TCP write buffer
net.ipv4.tcp_wmem = 4096 65536 67108864
# turn on path MTU discovery
net.ipv4.tcp_mtu_probing = 1

# for high-latency network
net.ipv4.tcp_congestion_control = hybla

# for low-latency network, use cubic instead
# net.ipv4.tcp_congestion_control = cubic

########################################################
Setting proxy for apt
########################################################

sudo nano /etc/apt/apt.conf
.........................................
Acquire::http::Proxy "http://127.0.0.1:8118";
Acquire::https::Proxy "http://127.0.0.1:8118";
.........................................



# More security
# https://www.tipsforchina.com/how-to-setup-a-fast-shadowsocks-server-on-vultr-vps-the-easy-way.html

Password: testing
Port: 443
cipher: chacha20
protocol: origin
obfs: http_simple_compatible
    "fast_open":true,
    "workers":1


########################################################
Setting KCPTUN Server-side
########################################################

# intsall kcp tun
cd /usr/local/src
sudo wget https://github.com/xtaci/kcptun/releases/download/v20180316/kcptun-linux-amd64-20180316.tar.gz
sudo rm -rfv kcptun
sudo mkdir -p kcptun
sudo tar xvf kcptun-linux-amd64-20180316.tar.gz -C ./kcptun
sudo mv ./kcptun/server_linux_amd64 /usr/local/bin/kcptun-server

# configure various env files
sudo vim /etc/sysconfig/kcptun-server-aes-256-cfb.env
.....................
TARGET="ssserver.ucoder.ir:8000"
LOCAL=":8002"
CRYPT="aes-192"
KEY="<PASSWORD>"
.....................
sudo vim /etc/sysconfig/kcptun-server-chacha20.env
.....................
TARGET="ssserver.ucoder.ir:3000"
LOCAL=":3002"
CRYPT="blowfish"
KEY="<PASSWORD>"
.....................
sudo vim /etc/sysconfig/kcptun-server-salsa20.env
.....................
TARGET="ssserver.ucoder.ir:4000"
LOCAL=":4002"
CRYPT="salsa20"
KEY="<PASSWORD>"
.....................

# configure systemd meta service
sudo vim /etc/systemd/system/kcptun-server@.service
...............................
[Unit]
Description=Kcp Tunnel Server %i
After=network.target shadowsocks@%i.service

[Service]
Type=simple
EnvironmentFile=/etc/sysconfig/kcptun-server-%i.env
ExecStart=/usr/local/bin/kcptun-server -t "$TARGET" -l "$LOCAL" --crypt "$CRYPT" --key "$KEY" -mode fast2 --nocomp --datashard 10 --parityshard 3 --dscp 46 --mtu 1200
Restart=on-abort

[Install]
WantedBy=multi-user.target
...............................


# reload systemd
sudo systemctl daemon-reload

# start services
sudo systemctl restart kcptun-server@aes-256-cfb.service
sudo systemctl status kcptun-server@aes-256-cfb.service
sudo systemctl enable kcptun-server@aes-256-cfb.service

sudo systemctl restart kcptun-server@chacha20.service
sudo systemctl status kcptun-server@chacha20.service
sudo systemctl enable kcptun-server@chacha20.service

sudo systemctl restart kcptun-server@salsa20.service
sudo systemctl status kcptun-server@salsa20.service
sudo systemctl enable kcptun-server@salsa20.service

# open ports through firewall
sudo firewall-cmd --reload
sudo firewall-cmd --permanent --add-port=8002/tcp
sudo firewall-cmd --permanent --add-port=8002/udp
sudo firewall-cmd --permanent --add-port=3002/tcp
sudo firewall-cmd --permanent --add-port=3002/udp
sudo firewall-cmd --permanent --add-port=4002/tcp
sudo firewall-cmd --permanent --add-port=4002/udp
sudo firewall-cmd --reload

########################################################
Setting KCPTUN Client-side
########################################################

# intsall kcp tun
cd /usr/local/src
sudo wget https://github.com/xtaci/kcptun/releases/download/v20180316/kcptun-linux-amd64-20180316.tar.gz
sudo rm -rfv kcptun
sudo mkdir -p kcptun
sudo tar xvf kcptun-linux-amd64-20180316.tar.gz -C ./kcptun
sudo mv ./kcptun/client_linux_amd64 /usr/local/bin/kcptun-client

# make sure sysconfig is present
sudo mkdir -p /etc/sysconfig

# configure various env files
sudo vim /etc/sysconfig/kcptun-client-aes-256-cfb.env
.....................
SERVER="kcp.ucoder.ir:8002"
LOCAL=":3002"
CRYPT="aes-192"
KEY="<PASSWORD>"
.....................
sudo vim /etc/sysconfig/kcptun-client-chacha20.env
.....................
SERVER="kcp.ucoder.ir:3002"
LOCAL=":3002"
CRYPT="blowfish"
KEY="<PASSWORD>"
.....................
sudo vim /etc/sysconfig/kcptun-client-salsa20.env
.....................
SERVER="kcp.ucoder.ir:4002"
LOCAL=":3002"
CRYPT="salsa20"
KEY="<PASSWORD>"
.....................

# create primary config
sudo ln -s /etc/sysconfig/kcptun-client-chacha20.env /etc/sysconfig/kcptun-client.env

# create systemd unit
sudo vim /etc/systemd/system/kcptun-client.service
...............................
[Unit]
Description=Kcp Tunnel Client
After=network.target

[Service]
Type=simple
EnvironmentFile=/etc/sysconfig/kcptun-client.env
ExecStart=/usr/local/bin/kcptun-client -r "$SERVER" -l "$LOCAL" --crypt "$CRYPT" --key "$KEY" -mode fast2 --nocomp --datashard 10 --parityshard 3 --dscp 46 --mtu 1200
Restart=on-abort

[Install]
WantedBy=multi-user.target
...............................

# enable and start service
sudo systemctl daemon-reload
sudo systemctl restart kcptun-client.service
sudo systemctl status kcptun-client.service
sudo systemctl enable kcptun-client.service

# create config for shadowsocks
sudo vim /etc/sysconfig/shadowsocks-kcp-aes-256-cfb.json
..............................
{
  "server":"127.0.0.1",
  "server_port":3002,
  "local_port":1080,
  "password":"<PASSWORD>",
  "timeout":600,
  "method":"aes-256-cfb"
}
..............................

sudo vim /etc/sysconfig/shadowsocks-kcp-chacha20.json
..............................
{
  "server":"127.0.0.1",
  "server_port":3002,
  "local_port":1080,
  "password":"<PASSWORD>",
  "timeout":600,
  "method":"chacha20"
}
..............................

sudo vim /etc/sysconfig/shadowsocks-kcp-salsa20.json
..............................
{
  "server":"127.0.0.1",
  "server_port":3002,
  "local_port":1080,
  "password":"<PASSWORD>",
  "timeout":600,
  "method":"salsa20"
}
..............................

########################################################
Setting KCPTUN Android-Side
########################################################

-> install "kcptun" from playstore
-> enable kcptun plugin in shadowsocks
-> configure using following
.....................
remoteaddr=kcp.ucoder.ir:3002;mode=fast2;dscp=46;crypt=blowfish;parityshard=3;key=<PASSWORD>;nocomp;datashard=10;mtu=1200
.....................

NOTE: ALL OTHER SHADOWSOCKS CONFIG REMAINS THE SAME AS WITHOUT KCP!

########################################################
Check UPnP
########################################################

cd ~/.local/src
wget http://miniupnp.tuxfamily.org/files/download.php?file=miniupnpc-2.1.tar.gz
cd miniupnpc-2.1/
make
INSTALLPREFIX=/home/arcana/.local make install

upnpc -a `ifconfig wlp3s0 | grep "inet addr" | cut -d : -f 2 | cut -d " " -f 1` 30000 30000 UDP


########################################################
Setup udp2raw Server for OpenVPN
########################################################

# install udp2raw
cd /usr/local/src
sudo wget https://github.com/wangyu-/udp2raw-tunnel/releases/download/20180225.0/udp2raw_binaries.tar.gz
sudo mkdir -p udp2raw
sudo tar xvf udp2raw_binaries.tar.gz -C ./udp2raw
sudo mv ./udp2raw/udp2raw_amd64 /usr/local/bin/udp2raw

# create systemd unit
sudo vim /etc/systemd/system/udp2raw-openvpn.service
...............................
[Unit]
Description=UDP2RAW for OpenVPN
After=network.target docker.service

[Service]
Type=simple
ExecStart=/usr/local/bin/udp2raw -s -l 0.0.0.0:1195 -r 127.0.0.1:2000 --raw-mode faketcp --cipher-mode aes128cbc --auth-mode md5 --key <PASSWORD> --auto-rule
Restart=on-abort

[Install]
WantedBy=multi-user.target
...............................

# enable and start services
sudo systemctl daemon-reload
sudo systemctl restart udp2raw-openvpn.service
sudo systemctl status udp2raw-openvpn.service
sudo systemctl enable udp2raw-openvpn.service

# allow port through firewall
sudo firewall-cmd --reload
sudo firewall-cmd --permanent --add-port=1195/tcp
sudo firewall-cmd --permanent --add-port=1195/udp
sudo firewall-cmd --reload

#########################################################
Setup udp2raw Client for OpenVPN
##
## NOTE: udp2raw DOES NOT WORK WITH DOMAIN NAMES!
##
########################################################

# install udp2raw
cd /usr/local/src
sudo wget https://github.com/wangyu-/udp2raw-tunnel/releases/download/20180225.0/udp2raw_binaries.tar.gz
sudo mkdir -p udp2raw
sudo tar xvf udp2raw_binaries.tar.gz -C ./udp2raw
sudo mv ./udp2raw/udp2raw_amd64 /usr/local/bin/udp2raw

# create systemd unit
sudo vim /etc/systemd/system/udp2raw-openvpn.service
...............................
[Unit]
Description=UDP2RAW for OpenVPN
After=network.target

[Service]
Type=simple
ExecStart=/usr/local/bin/udp2raw -c -l 127.0.0.1:1195 -r 172.162.203.161:2000 --raw-mode faketcp --cipher-mode aes128cbc --auth-mode md5 --key <PASSWORD> --auto-rule
Restart=on-abort

[Install]
WantedBy=multi-user.target
...............................

# enable and start services
sudo systemctl daemon-reload
sudo systemctl restart udp2raw-openvpn.service
sudo systemctl status udp2raw-openvpn.service
sudo systemctl enable udp2raw-openvpn.service


#### NOTE: connect OpenVPN through UDP

########################################################
Setup udp2raw Server for kcptun
########################################################

# configure various env files
sudo vim /etc/sysconfig/udp2raw-kcp-aes-256-cfb.env
.........................
LISTEN="8003"
REDIRECT="8002"
CIPHER="aes128cbc"
AUTH="md5"
KEY="<PASSWORD>"
.........................
sudo vim /etc/sysconfig/udp2raw-kcp-chacha20.env
.........................
LISTEN="3003"
REDIRECT="3002"
CIPHER="aes128cbc"
AUTH="md5"
KEY="<PASSWORD>"
.........................
sudo vim /etc/sysconfig/udp2raw-kcp-salsa20.env
.........................
LISTEN="4003"
REDIRECT="4002"
CIPHER="aes128cbc"
AUTH="md5"
KEY="<PASSWORD>"
.........................

# create systemd unit
sudo vim /etc/systemd/system/udp2raw-kcp@.service
...............................
[Unit]
Description=UDP2RAW for %i KCP Tunnel
After=network.target kcptun-server@%i.service

[Service]
Type=simple
EnvironmentFile=/etc/sysconfig/udp2raw-kcp-%i.env
ExecStart=/usr/local/bin/udp2raw -s -l "0.0.0.0:${LISTEN}" -r "127.0.0.1:${REDIRECT}" --raw-mode faketcp --cipher-mode ${CIPHER} --auth-mode ${AUTH} --key ${KEY} --auto-rule
Restart=on-abort

[Install]
WantedBy=multi-user.target
...............................

# reload systemd
sudo systemctl daemon-reload

# start and reload services
sudo systemctl restart udp2raw-kcp@aes-256-cfb.service
sudo systemctl status udp2raw-kcp@aes-256-cfb.service
sudo systemctl enable udp2raw-kcp@aes-256-cfb.service

sudo systemctl restart udp2raw-kcp@chacha20.service
sudo systemctl status udp2raw-kcp@chacha20.service
sudo systemctl enable udp2raw-kcp@chacha20.service

sudo systemctl restart udp2raw-kcp@salsa20.service
sudo systemctl status udp2raw-kcp@salsa20.service
sudo systemctl enable udp2raw-kcp@salsa20.service

# add ports to firewall
sudo firewall-cmd --reload
sudo firewall-cmd --permanent --add-port=8003/tcp
sudo firewall-cmd --permanent --add-port=8003/udp
sudo firewall-cmd --permanent --add-port=4003/tcp
sudo firewall-cmd --permanent --add-port=4003/udp
sudo firewall-cmd --permanent --add-port=3003/tcp
sudo firewall-cmd --permanent --add-port=3003/udp
sudo firewall-cmd --reload

########################################################
Setup udp2raw Client for kcptun
########################################################

# configure various env files
sudo vim /etc/sysconfig/udp2raw-kcp-aes-256-cfb.env
.........................
LISTEN="3003"
REDIRECT="178.162.203.161:8003"
CIPHER="aes128cbc"
AUTH="md5"
KEY="<PASSWORD>"
.........................
sudo vim /etc/sysconfig/udp2raw-kcp-chacha20.env
.........................
LISTEN="3003"
REDIRECT="178.162.203.161:3003"
CIPHER="aes128cbc"
AUTH="md5"
KEY="<PASSWORD>"
.........................
sudo vim /etc/sysconfig/udp2raw-kcp-salsa20.env
.........................
LISTEN="3003"
REDIRECT="178.162.203.161:4003"
CIPHER="aes128cbc"
AUTH="md5"
KEY="<PASSWORD>"
.........................

# create primary config file
sudo ln -s /etc/sysconfig/udp2raw-kcp-chacha20.env /etc/sysconfig/udp2raw-kcp.env

# create systemd unit
sudo vim /etc/systemd/system/udp2raw-kcp.service
...............................
[Unit]
Description=UDP2RAW for KCP Tunnel
After=network.target

[Service]
Type=simple
EnvironmentFile=/etc/sysconfig/udp2raw-kcp.env
ExecStart=/usr/local/bin/udp2raw -c -l "0.0.0.0:${LISTEN}" -r "${REDIRECT}" --raw-mode faketcp --cipher-mode ${CIPHER} --auth-mode ${AUTH} --key ${KEY} --auto-rule
Restart=on-abort

[Install]
WantedBy=multi-user.target
...............................

# enable and start service
sudo systemctl daemon-reload
sudo systemctl restart udp2raw-kcp.service
sudo systemctl status udp2raw-kcp.service
sudo systemctl enable udp2raw-kcp.service

# configure various env files
sudo vim /etc/sysconfig/kcptun-client-udp2raw-aes-256-cfb.env
.....................
SERVER="127.0.0.1:3003"
LOCAL=":3002"
CRYPT="aes-192"
KEY="<PASSWORD>"
.....................
sudo vim /etc/sysconfig/kcptun-client-udp2raw-chacha20.env
.....................
SERVER="127.0.0.1:3003"
LOCAL=":3002"
CRYPT="blowfish"
KEY="<PASSWORD>"
.....................
sudo vim /etc/sysconfig/kcptun-client-udp2raw-salsa20.env
.....................
SERVER="127.0.0.1:3003"
LOCAL=":3002"
CRYPT="salsa20"
KEY="<PASSWORD>"
.....................


########################################################
Brook Server
########################################################

# install
sudo wget -O /usr/bin/brook https://github.com/txthinking/brook/releases/download/v20180707/brook
sudo chmod +x /usr/bin/brook

# create systemd unit file
sudo vim /etc/systemd/system/brook-server.service
...............................................................
[Unit]
Description=Brook Server
After=network.target

[Service]
ExecStart=/usr/bin/brook server -l :3001 -p <PASSWORD>
Restart=on-abort

[Install]
WantedBy=multi-user.target
...............................................................

# enable and start services
sudo systemctl start brook-server.service
sudo systemctl enable brook-server.service
sudo systemctl status brook-server.service

# allow port through firewall
sudo firewall-cmd --reload
sudo firewall-cmd --permanent --add-port=3001/tcp
sudo firewall-cmd --reload


########################################################
Brook Client
########################################################

# install
sudo wget -O /usr/local/bin/brook https://github.com/txthinking/brook/releases/download/v20180707/brook
sudo chmod +x /usr/local/bin/brook

# create systemd unit file
sudo vim /etc/systemd/system/brook-client.service
...............................................................
[Unit]
Description=Brook Client
After=network.target
Conflicts=shadowsocks-client.service

[Service]
ExecStart=/usr/local/bin/brook client -l 127.0.0.1:1080 -i 127.0.0.1 -s 178.162.203.161:3001 -p <PASSWORD>
Restart=on-abort

[Install]
WantedBy=multi-user.target
...............................................................

########################################################
Install Telegram MTProto Proxy
########################################################

sudo yum install -y openssl-devel zlib-devel
sudo yum groupinstall -y "Development Tools"

cd /usr/local/src
sudo git clone https://github.com/TelegramMessenger/MTProxy
cd MTProxy
sudo make
sudo cp objs/bin/* /usr/local/bin/
sudo mkdir -p /etc/sysconfig/mtproto_proxy

# obtain secret
sudo curl -s https://core.telegram.org/getProxySecret -o /etc/sysconfig/mtproto_proxy/proxy-secret
# obtain configuration
sudo curl -s https://core.telegram.org/getProxyConfig -o /etc/sysconfig/mtproto_proxy/proxy-multi.conf
# obtain secret for client
sudo bash -c "head -c 16 /dev/urandom | xxd -ps > /etc/sysconfig/mtproto_proxy/client-secret"

# setup reverse proxy
sudo vim /etc/nginx/conf.d/sh.ucoder.ir.conf
...............................
server {
  listen 80 ;
  server_name mt.ucoder.ir;

  access_log /var/log/nginx/access_mt.log;
  error_log  /var/log/nginx/error_mtf.log;

  location /<<<HIIIIIIDEN SUBDIRECTORYYYYYYYYYYYYY>>> {
  #location / {
    rewrite ^/<<<HIIIIIIDEN SUBDIRECTORYYYYYYYYYYYYY>>>(/.*)$ $1 break;

    auth_basic "Private Property";
    auth_basic_user_file /etc/nginx/conf.d/sh.ucoder.ir.htpasswd;

    proxy_pass https://127.0.0.1:4200/;
    #proxy_pass https://127.0.0.1:4200;
    proxy_ssl_verify off;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_read_timeout 43200000;

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_set_header X-NginX-Proxy true;
  }

}
...............................




