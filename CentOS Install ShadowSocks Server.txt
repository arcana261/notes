#######################################################################
Installation (easy) method via pip
NOTE: NO UDP RELAY SUPPORTED
#######################################################################

# install shadow socks
sudo pip install shadowsocks

#######################################################################
Installation (source-code) method via git
UDP RELAY IS SUPPORTED
#######################################################################

# installation of pre-requisities
###################################
###### CENTOS
yum install epel-release -y
yum install git gcc gettext autoconf libtool automake make pcre-devel asciidoc xmlto c-ares-devel libev-devel -y
###### UBUNTU/DEBIAN
sudo apt-get install --no-install-recommends git gettext build-essential autoconf libtool libpcre3-dev asciidoc xmlto libev-dev libc-ares-dev automake
###################################

# clone source code
cd /usr/local/src
git clone https://github.com/shadowsocks/shadowsocks-libev.git
cd shadowsocks-libev

# find-out recent tag
git tag -l

# checkout specific tag
git checkout tags/v3.1.1 -b toinstall

# install submodules
git submodule update --init --recursive

# Installation of Libsodium
cd /usr/local/src
export LIBSODIUM_VER=1.0.13
wget https://download.libsodium.org/libsodium/releases/libsodium-$LIBSODIUM_VER.tar.gz
tar xvf libsodium-$LIBSODIUM_VER.tar.gz
pushd libsodium-$LIBSODIUM_VER
./configure --prefix=/usr && make
sudo make install
popd
sudo ldconfig

# Installation of MbedTLS
cd /usr/local/src
export MBEDTLS_VER=2.6.0
wget https://tls.mbed.org/download/mbedtls-$MBEDTLS_VER-gpl.tgz
tar xvf mbedtls-$MBEDTLS_VER-gpl.tgz
pushd mbedtls-$MBEDTLS_VER
make SHARED=1 CFLAGS=-fPIC
sudo make DESTDIR=/usr install
popd
sudo ldconfig

# build
cd /usr/local/src/shadowsocks-libev
./autogen.sh && ./configure && make

# install
sudo make install

#######################################################################
END INSTALLATION
#######################################################################

# create configuration
sudo vim /etc/shadowsocks.json

..............................
{
  "server":"178.162.203.161",
  "server_port":8000,
  "local_port":1080,
  "password":"<PASSWORD>",
  "timeout":600,
  "method":"aes-256-cfb"
}
..............................

# create systemd service
sudo vim /etc/systemd/system/shadowsocks-server.service

#######################################################################
CHOICE1: EASY INSTALLATION
#######################################################################
...............................
[Unit]
Description=Shadowsocks Server
After=network.target

[Service]
ExecStart=/usr/bin/ssserver -c /etc/shadowsocks.json
Restart=on-abort

[Install]
WantedBy=multi-user.target
...............................
#######################################################################
CHOICE2: SOURCE INSTALLATION
#######################################################################
...............................
[Unit]
Description=Shadowsocks Server
After=network.target

[Service]
Type=forking
PIDFile=/var/run/ss-server.pid
ExecStart=/usr/local/bin/ss-server -c /etc/shadowsocks.json -u -v -f /var/run/ss-server.pid
Restart=on-abort

[Install]
WantedBy=multi-user.target
...............................
#######################################################################
END CHOICE
#######################################################################

# enable and start service
sudo systemctl daemon-reload
sudo systemctl restart shadowsocks-server
sudo systemctl enable shadowsocks-server
sudo systemctl status shadowsocks-server


# open port in firewall
sudo firewall-cmd --reload
sudo firewall-cmd --permanent --add-port=8000/tcp
sudo firewall-cmd --permanent --add-port=8000/udp
sudo firewall-cmd --reload

# protect against brute forcers
# create a fail2ban filter
sudo vim /etc/fail2ban/filter.d/shadowsocks.conf
#######################################################################
CHOICE1: EASY INSTALLATION
#######################################################################
...................................................
[Definition]

_daemon = ssserver
failregex = can not parse header when handling connection from <HOST>:\d{1,5}$

ignoreregex =
...................................................
#######################################################################
CHOICE2: SOURCE INSTALLATION
#######################################################################
...................................................
[Definition]

_daemon = /usr/local/bin/ss-server
failregex = failed to handshake with <HOST>: invalid (host name|adddress type).*$

ignoreregex =
...................................................
#######################################################################
END CHOICE
#######################################################################

# create a fail2ban jail
sudo vim /etc/fail2ban/jail.conf
...................................................
[shadowsocks]

enabled  = true
filter   = shadowsocks
backend  = systemd
maxretry = 3
...................................................

# restart fail2ban
sudo systemctl restart fail2ban.service
sudo systemctl status fail2ban.service

# view jails
sudo fail2ban-client status
sudo fail2ban-client status shadowsocks

#######################################################################
Linux Client Configuration
#######################################################################

# create configuration
vim ~/.config/shadowsocks.json

..............................
{
  "server":"178.162.203.161",
  "server_port":8000,
  "local_port":1080,
  "password":"<PASSWORD>",
  "timeout":600,
  "method":"aes-256-cfb"
}
..............................


# start proxy
sslocal -c ~/.config/shadowsocks.json

################################################
## ALTERNATIVE USE SYSTEMD
################################################

sudo vim /etc/shadowsocks.json

..............................
{
  "server":"178.162.203.161",
  "server_port":8000,
  "local_port":1080,
  "password":"<PASSWORD>",
  "timeout":600,
  "method":"aes-256-cfb"
}
..............................

# create systemd service
sudo vim /etc/systemd/system/shadowsocks-client.service

...............................
[Unit]
Description=Shadowsocks Client
After=network.target

[Service]
ExecStart=/usr/local/bin/sslocal -c /etc/shadowsocks.json
Restart=on-abort

[Install]
WantedBy=multi-user.target
...............................
...............................
[Unit]
Description=Shadowsocks Client
After=network.target

[Service]
Type=forking
PIDFile=/var/run/ss-local.pid
ExecStart=/usr/local/bin/ss-local -c /etc/shadowsocks.json -u -v -f /var/run/ss-local.pid
Restart=on-abort

[Install]
WantedBy=multi-user.target
...............................

# enable and start service
sudo systemctl daemon-reload
sudo systemctl restart shadowsocks-client
sudo systemctl enable shadowsocks-client
sudo systemctl status shadowsocks-client

################################################

# install privoxy
||| sudo yum install privoxy
||| sudo apt-get install privoxy

# configure privoxy
sudo vim /etc/privoxy/config
>>>>>>>>>>>>>>>
# search below, duplicate
# listen-address will cause
# privoxy to fail
listen-address		0.0.0.0:8118


forward-socks5	/	127.0.0.1:1080	.
forward         192.168.*.*/     .
forward         192.168.*.*:*/     .
forward            10.*.*.*/     .
forward            10.*.*.*:*/     .
forward           127.*.*.*/     .
forward           127.*.*.*:*/     .
forward           172.*.*.*/     .
forward           172.*.*.*:*/     .
<<<<<<<<<<<<<<<

# enable and start privoxy services
sudo systemctl restart privoxy
sudo systemctl enable privoxy
sudo systemctl status privoxy

# tell sudo to keep proxy config
sudo visudo
.................
Defaults    env_keep += "http_proxy HTTP_PROXY https_proxy HTTPS_PROXY"
.................

# create a source script to set environments
vim ~/proxy.source
.................
export http_proxy="http://127.0.0.1:8118/"
export HTTP_PROXY=$http_proxy
export https_proxy=$http_proxy
export HTTPS_PROXY=$http_proxy
.................

# create a source script to un-set environments
vim ~/no-proxy.source
.................
unset http_proxy
unset HTTP_PROXY
unset https_proxy
unset HTTPS_PROXY
.................

########################################################
########################################################

# load proxy environment
source ~/proxy.source


# load no proxy environment
source ~/no-proxy.source

########################################################
Install OpenVPN (to be used accross shadowsocks)
########################################################

# initialize openvpn
docker volume create --name "ovpn-data"
docker run -v "ovpn-data":/etc/openvpn --rm kylemanna/openvpn ovpn_genconfig -u udp://ssserver.ucoder.ir
docker run -v "ovpn-data":/etc/openvpn --rm -it kylemanna/openvpn ovpn_initpki

# run openvpn
docker run -v "ovpn-data":/etc/openvpn -td -p 1194:1194/udp --cap-add=NET_ADMIN --restart=always kylemanna/openvpn

# generate client id without pass
docker run -v "ovpn-data":/etc/openvpn --rm -it kylemanna/openvpn easyrsa build-client-full arcana nopass

# retrieve client configuration
docker run -v "ovpn-data":/etc/openvpn --rm kylemanna/openvpn ovpn_getclient arcana > arcana.ovpn

########################################################
Connect to OpenVPN over Shadowsocks
########################################################

# modify ovpn file to access it over shadowsocks
.....................................
socks-proxy 127.0.0.1 1080
route SHADOWSOCKS_SERVER_IP 255.255.255.255 <GATEWAY>
script-security 2                                                                                                       
dhcp-option DNS 4.2.2.4
dhcp-option DOMAIN arcana.me

# Only on ubuntu client, you also need following directives:                                                              
up /etc/openvpn/update-resolv-conf                                                                                      
down /etc/openvpn/update-resolv-conf  
.....................................

# ensure these packages are installed on client
sudo apt-get install network-manager-openvpn-gnome

# ensure some firewall ports are open
sudo ufw reload
sudo ufw allow 1194/tcp
sudo ufw allow 1194/udp
sudo ufw allow 1080/tcp
sudo ufw allow 1080/udp
sudo ufw reload

########################################################
Optimizing Shadow Socks
########################################################

# max open files
fs.file-max = 51200
# max read buffer
net.core.rmem_max = 67108864
# max write buffer
net.core.wmem_max = 67108864
# default read buffer
net.core.rmem_default = 65536
# default write buffer
net.core.wmem_default = 65536
# max processor input queue
net.core.netdev_max_backlog = 4096
# max backlog
net.core.somaxconn = 4096

# resist SYN flood attacks
net.ipv4.tcp_syncookies = 1
# reuse timewait sockets when safe
net.ipv4.tcp_tw_reuse = 1
# turn off fast timewait sockets recycling
net.ipv4.tcp_tw_recycle = 0
# short FIN timeout
net.ipv4.tcp_fin_timeout = 30
# short keepalive time
net.ipv4.tcp_keepalive_time = 1200
# outbound port range
net.ipv4.ip_local_port_range = 10000 65000
# max SYN backlog
net.ipv4.tcp_max_syn_backlog = 4096
# max timewait sockets held by system simultaneously
net.ipv4.tcp_max_tw_buckets = 5000
# turn on TCP Fast Open on both client and server side
net.ipv4.tcp_fastopen = 3
# TCP receive buffer
net.ipv4.tcp_rmem = 4096 87380 67108864
# TCP write buffer
net.ipv4.tcp_wmem = 4096 65536 67108864
# turn on path MTU discovery
net.ipv4.tcp_mtu_probing = 1

# for high-latency network
net.ipv4.tcp_congestion_control = hybla

# for low-latency network, use cubic instead
# net.ipv4.tcp_congestion_control = cubic



