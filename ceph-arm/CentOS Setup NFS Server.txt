Ubuntu Guides:
	https://help.ubuntu.com/community/NFSv4Howto
	https://www.digitalocean.com/community/tutorials/how-to-set-up-an-nfs-mount-on-ubuntu-16-04
	https://www.server-world.info/en/note?os=Ubuntu_16.04&p=nfs
	https://www.certdepot.net/rhel7-use-kerberos-control-access-nfs-network-shares/
========================================================================================================

###########
############################
### CENTOS MACHINE
###########
############################

# create an inet account which has access to internet
sudo useradd -d /home/ceph_u -m ceph_u -G wheel

# temporarily disable selinux
sudo setenforce 0

# set password
sudo passwd ceph_u

# create a new script for target user
sudo nano -w /sbin/bash-inet
.................................................
#!/bin/bash

USERNAME=`/usr/bin/whoami`

if test -z "$2"; then
	/usr/bin/sudo /sbin/ip netns exec inet /bin/bash -c "/usr/bin/sudo -u ${USERNAME} /bin/bash"
else
	/usr/bin/sudo /sbin/ip netns exec inet /bin/bash -c "/usr/bin/sudo -u ${USERNAME} /bin/bash -c '$2'"
fi

.................................................

# make executable
sudo chmod +x /sbin/bash-inet

# add to list of valid shells
sudo nano -w /etc/shells
.................................................
/sbin/bash-inet
.................................................

# enable password-less sudo
sudo bash -c 'echo "ceph_u ALL = (root) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/ceph_u'

###########
############################
### Admin Node
### RUN AS ceph_u USER!
###########
############################

# add to /etc/hosts
sudo nano -w /etc/hosts
.................................................
192.168.5.103   iscsitarget-test
.................................................

# ensure we are as ceph_u user
su - ceph_u

# navigate to cluster directory
cd /home/ceph_u/my-cluster

# add to ssh config
nano -w /home/ceph_u/.ssh/config
.................................................
Host iscsitarget-test
        Hostname iscsitarget-test
        User    ceph_u  
        Port    2122
.................................................

# copy ssh id of admin to client
ssh-copy-id iscsitarget-test

###########
############################
### CENTOS MACHINE
###########
############################

# change login shell of user ceph_u
sudo chsh -s /sbin/bash-inet ceph_u

###########
############################
### Admin Node
###########
############################

# install ceph
ceph-deploy install iscsitarget-test

# make it admin
ceph-deploy admin iscsitarget-test

###########
############################
### CENTOS MACHINE
###########
############################

# disable password-less sudo
sudo rm -f /etc/sudoers.d/ceph_u

# change login shell of user ceph_u
sudo chsh -s /bin/bash ceph_u

# enable selinux
sudo setenforce 1

# create rbd image to use
sudo rbd create --size 1000000 nfs-test
sudo rbd map rbd/nfs-test
sudo mkfs.xfs /dev/rbd/rbd/nfs-test
sudo rbd unmap rbd/nfs-test

# create shell script to mount rbd device
sudo nano -w /opt/mount-rbd-nfs-test.sh
.................................................
#!/bin/bash

/bin/mkdir -p /nfs-test

#######################################
# the following is only necessary
# because we are creating an NFS
# share.
chmod -R 777 /nfs-test
chown -R nobody:nogroup /nfs-test
#######################################

/bin/rbd map rbd/nfs-test
/bin/mount /dev/rbd/rbd/nfs-test /nfs-test

.................................................

# make it executable
sudo chmod +x /opt/mount-rbd-nfs-test.sh

# create shell script to unmount rbd device
sudo nano -w /opt/umount-rbd-nfs-test.sh
.................................................
#!/bin/bash

/bin/umount /nfs-test
/bin/rbd unmap rbd/nfs-test
.................................................

# make it executable
sudo chmod +x /opt/umount-rbd-nfs-test.sh

# create systemd service
sudo nano -w /lib/systemd/system/mount-rbd-nfs-test.service
.................................................
[Unit]
Description=RADOS block device mapping for "rbd"/"nfs-test"
Conflicts=shutdown.target
Wants=network-online.target
# Remove this if you don't have Networkmanager
After=network-online.target NetworkManager-wait-online.service
Before=rpcbind.service nfs-server.service nfs-lock.service nfs-idmap.service

[Service]
Type=oneshot
ExecStart=/opt/mount-rbd-nfs-test.sh
ExecStop=/opt/umount-rbd-nfs-test.sh
TimeoutSec=0
RemainAfterExit=yes

[Install]
WantedBy=network-online.target
.................................................

# enable service
sudo systemctl daemon-reload
sudo systemctl enable mount-rbd-nfs-test.service
sudo systemctl restart mount-rbd-nfs-test.service
sudo systemctl status mount-rbd-nfs-test.service

#############################################################################
## Install NFS Server
#############################################################################

# install necessary packages
sudo yum install nfs-utils

# create an NFS share
# NOTE: multiple entries per share can be specified (e.g.
# /share 192.168.89.1/24(rw,no_root_squash,async)  192.168.92.0/24(rw,no_root_squash,async)
sudo nano -w /etc/exports
.................................................
/nfs-test    192.168.5.96(rw,sync,no_root_squash,no_all_squash)
.................................................

# export new configuration
sudo exportfs -avr

# verify exports
sudo showmount -e localhost

# enable and start services
sudo systemctl enable rpcbind
sudo systemctl enable nfs-server
sudo systemctl enable nfs-lock
sudo systemctl enable nfs-idmap
sudo systemctl restart rpcbind
sudo systemctl restart nfs-server
sudo systemctl restart nfs-lock
sudo systemctl restart nfs-idmap
sudo systemctl status rpcbind
sudo systemctl status nfs-server
sudo systemctl status nfs-lock
sudo systemctl status nfs-idmap

# enable service through firewall
sudo firewall-cmd --reload
sudo firewall-cmd --permanent --add-service=nfs
sudo firewall-cmd --reload

#############################################################################
## Setup Kerberos Server
#############################################################################

# ensure hostname contains the domain name
sudo hostnamectl set-hostname kerberosserver.kstorage1.org

# add it to /etc/hosts
sudo vim /etc/hosts
> 127.0.0.1           kerberosserver
> 127.0.0.1           kerberosserver.kstorage1.org

# reboot system
sudo reboot

# install required packages
sudo yum install krb5-server krb5-workstation pam_krb5 haveged rsh

# edit configuration and set domain name
sudo vim /etc/krb5.conf
>>> set "EXAMPLE.COM" to "KSTORAGE1.ORG"
>>> set "kerberos.example.com" to "kerberosserver.kstorage1.org"
>>> set "example.com" to "kstorage1.org"
.....................................................................
# Configuration snippets may be placed in this directory as well
includedir /etc/krb5.conf.d/

[logging]
 default = FILE:/var/log/krb5libs.log
 kdc = FILE:/var/log/krb5kdc.log
 admin_server = FILE:/var/log/kadmind.log

[libdefaults]
 dns_lookup_realm = false
 ticket_lifetime = 24h
 renew_lifetime = 7d
 forwardable = true
 rdns = false
 default_realm = KSTORAGE1.ORG
 default_ccache_name = KEYRING:persistent:%{uid}

[realms]
KSTORAGE1.ORG = {
 kdc = kerberosserver.kstorage1.org
 admin_server = kerberosserver.kstorage1.org
}

[domain_realm]
.kstorage1.org = KSTORAGE1.ORG
kstorage1.org = KSTORAGE1.ORG
.....................................................................

# edit configuration and set domain name
sudo vim /var/kerberos/krb5kdc/kadm5.acl
>>> set "EXAMPLE.COM" to "KSTORAGE1.ORG"
>>> set "kerberos.example.com" to "kerberosserver.kstorage1.org"
>>> set "example.com" to "kstorage1.org"
.....................................................................
*/admin@KSTORAGE1.ORG	*
.....................................................................

# enable kerberos through firewall
sudo firewall-cmd --reload
sudo firewall-cmd --permanent --add-service=kerberos
sudo firewall-cmd --permanent --add-port=749/tcp
sudo firewall-cmd --reload

# enable entropy generation tool "haveged"
sudo systemctl restart haveged
sudo systemctl enable haveged
sudo systemctl status haveged

# check available system entropy
sudo cat /proc/sys/kernel/random/entropy_avail

# create database for realm
sudo kdb5_util create -s

#.... CREATE SOME ENTROPY ON SYSTEM!
#.... IN ANOTHER TERMINAL DO:
#.... ping -f localhost

# enable and start services
sudo systemctl enable krb5kdc
sudo systemctl enable kadmin
sudo systemctl enable nfs-secure 
sudo systemctl restart krb5kdc
sudo systemctl restart kadmin
sudo systemctl restart nfs-secure 
sudo systemctl status krb5kdc kadmin nfs-secure 

# create admin principal for root
# add kerberos server to database
# add NFS server and client to database
sudo kadmin.local
> addprinc root/admin
> addprinc -randkey kadmin/kerberosserver.kstorage1.org@KSTORAGE1.ORG
> addprinc -randkey host/kerberosserver.kstorage1.org
> addprinc -randkey host/nfsserver.kstorage1.org
> addprinc -randkey host/nfsclient.kstorage1.org
> addprinc -randkey nfs/nfsserver.kstorage1.org
> addprinc -randkey nfs/nfsclient.kstorage1.org
> quit

# obtain and cache Kerberos ticket-granting ticket for root/admin
sudo kinit root/admin

# verify ticket is created
sudo klist

# create keytab file and store principals that are allowed to use kerberos authentication
sudo kadmin.local
> ktadd kadmin/kerberosserver.kstorage1.org@KSTORAGE1.ORG
> ktadd host/kerberosserver.kstorage1.org
> ktadd host/nfsserver.kstorage1.org
> ktadd host/nfsclient.kstorage1.org
> ktadd nfs/nfsserver.kstorage1.org
> ktadd nfs/nfsclient.kstorage1.org
> quit

#############################################################################
## Setup NFS Server to use with Kerberos
##
## Note1:
##	 The sec option accepts four different values:
##		 sec=sys (no Kerberos use),
##		 sec=krb5 (Kerberos user authentication only),
##		 sec=krb5i (Kerberos user authentication and integrity checking),
##		 sec=krb5p (Kerberos user authentication, integrity checking and NFS traffic encryption).
##	 The higher the level, the more you consume resources.
##
## Note2: If you want to use sec=sys (no Kerberos use), you also need to run setsebool -P nfsd_anon_write 1
#############################################################################

# ensure hostname contains the domain name
sudo hostnamectl set-hostname nfsserver.kstorage1.org

# add it to /etc/hosts
sudo vim /etc/hosts
> 127.0.0.1           nfsserver
> 127.0.0.1           nfsserver.kstorage1.org

# reboot system
sudo reboot

# install required packages
sudo yum install -y krb5-workstation pam_krb5 haveged rsh

# import kerberos configuration from kerberos server:
sudo vim /etc/krb5.conf
>>> set "EXAMPLE.COM" to "KSTORAGE1.ORG"
>>> set "kerberos.example.com" to "kerberosserver.kstorage1.org"
>>> set "example.com" to "kstorage1.org"
.....................................................................
# Configuration snippets may be placed in this directory as well
includedir /etc/krb5.conf.d/

[logging]
 default = FILE:/var/log/krb5libs.log
 kdc = FILE:/var/log/krb5kdc.log
 admin_server = FILE:/var/log/kadmind.log

[libdefaults]
 dns_lookup_realm = false
 ticket_lifetime = 24h
 renew_lifetime = 7d
 forwardable = true
 rdns = false
 default_realm = KSTORAGE1.ORG
 default_ccache_name = KEYRING:persistent:%{uid}

[realms]
KSTORAGE1.ORG = {
 kdc = kerberosserver.kstorage1.org
 admin_server = kerberosserver.kstorage1.org
}

[domain_realm]
.kstorage1.org = KSTORAGE1.ORG
kstorage1.org = KSTORAGE1.ORG
.....................................................................

# enable entropy generation tool "haveged"
sudo systemctl restart haveged
sudo systemctl enable haveged
sudo systemctl status haveged

# check available system entropy
sudo cat /proc/sys/kernel/random/entropy_avail

# enable kerberos through firewall
sudo firewall-cmd --reload
sudo firewall-cmd --permanent --add-service=kerberos
sudo firewall-cmd --reload

# open kadmin to server
sudo bash -c "env KRB5_TRACE=/dev/stdout kadmin -p root/admin@KSTORAGE1.ORG -r KSTORAGE1.ORG"
> ktadd host/nfsserver.kstorage1.org
> ktadd nfs/nfsserver.kstorage1.org
> exit

# verify existing keys
sudo klist -e -k /etc/krb5.keytab

# create an NFS share
sudo nano -w /etc/exports
.................................................
/nfs-test    nfsclient.kstorage1.org(rw,no_root_squash,sec=krb5)
.................................................

# export new configuration
sudo exportfs -avr

# verify exports
sudo showmount -e localhost

# start secure NFS service
sudo systemctl enable nfs-secure nfs-secure-server 
sudo systemctl disable gssproxy
sudo systemctl stop gssproxy
sudo systemctl restart nfs-secure nfs-secure-server
sudo systemctl status nfs-secure nfs-secure-server

#############################################################################
## Setup NFS Client to use with Kerberos
#############################################################################

# ensure hostname contains the domain name
sudo hostnamectl set-hostname nfsclient.kstorage1.org

# add it to /etc/hosts
sudo vim /etc/hosts
> 127.0.0.1           nfsclient
> 127.0.0.1           nfsclient.kstorage1.org

# reboot system
sudo reboot

# install required packages
sudo yum install -y krb5-workstation pam_krb5 haveged rsh

# import kerberos configuration from kerberos server:
sudo vim /etc/krb5.conf
>>> set "EXAMPLE.COM" to "KSTORAGE1.ORG"
>>> set "kerberos.example.com" to "kerberosserver.kstorage1.org"
>>> set "example.com" to "kstorage1.org"
.....................................................................
# Configuration snippets may be placed in this directory as well
includedir /etc/krb5.conf.d/

[logging]
 default = FILE:/var/log/krb5libs.log
 kdc = FILE:/var/log/krb5kdc.log
 admin_server = FILE:/var/log/kadmind.log

[libdefaults]
 dns_lookup_realm = false
 ticket_lifetime = 24h
 renew_lifetime = 7d
 forwardable = true
 rdns = false
 default_realm = KSTORAGE1.ORG
 default_ccache_name = KEYRING:persistent:%{uid}

[realms]
KSTORAGE1.ORG = {
 kdc = kerberosserver.kstorage1.org
 admin_server = kerberosserver.kstorage1.org
}

[domain_realm]
.kstorage1.org = KSTORAGE1.ORG
kstorage1.org = KSTORAGE1.ORG
.....................................................................

# enable entropy generation tool "haveged"
sudo systemctl restart haveged
sudo systemctl enable haveged
sudo systemctl status haveged

# check available system entropy
sudo cat /proc/sys/kernel/random/entropy_avail

# enable kerberos through firewall
sudo firewall-cmd --reload
sudo firewall-cmd --permanent --add-service=kerberos
sudo firewall-cmd --reload

# open kadmin to server
sudo bash -c "env KRB5_TRACE=/dev/stdout kadmin -p root/admin@KSTORAGE1.ORG -r KSTORAGE1.ORG"
> ktadd host/nfsclient.kstorage1.org
> ktadd nfs/nfsclient.kstorage1.org
> exit

# verify existing keys
sudo klist -e -k /etc/krb5.keytab

# enable services
sudo systemctl disable gssproxy
sudo systemctl stop gssproxy
sudo systemctl enable nfs-secure
sudo systemctl enable nfs-client.target
sudo systemctl restart nfs-secure
sudo systemctl restart nfs-client.target
sudo systemctl status nfs-secure nfs-client.target

# mount using mount command
sudo mount -t nfs4 -o sec=krb5 nfsserver.kstorage1.org:/nfs-test /mnt

# mount using fstab
nfsserver.kstorage1.org:/nfs-test /mnt nfs4 sec=krb5


