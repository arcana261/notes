Ceph Deploy Guide:
https://blog.zhaw.ch/icclab/deploy-ceph-and-start-using-it-end-to-end-tutorial-installation-part-13/
http://blog.programster.org/ubuntu-14-04-add-a-ceph-metadata-server/




Resources Needed:

(ufw assign 64MB more RAM)
(docker needs at least 240MB RAM)
(zabbix agent needs at lest 64MB RAM)

1. Give QEMU guest 5000 MB RAM
2. Give Host containing QEMU 8GB RAM
3. Give QEMU a 100GB disk image
4. Monitor VM -> 192 MB
5. OSD VM -> 400 MB
6. MDS VM -> 208 MB
7. RGW VM -> 192 MB
8. DNS VM -> 272 MB
9. NGINX VM -> 192 MB
10. WIN VM -> 896MB, 1.5GB, 2GB
11. Admin Node -> 192 MB

NOTES:
1. get cephfs layout on file
   getfattr -n ceph.file.layout file
2. set ceohfs layout on file
   setfattr -n ceph.file.layout.stripe_unit -v 1048576 file2


[Swarm]
[240MB, 256MB, 512MB, ...]


###### Ubuntu 14.04
# https://github.com/ceph/ceph
# v10.2.5

##
## what would change if we compile in 16.04?
##
## 1. package dependencies for "equivs" down below
## 2. babelrc version might differ
## 3. boost version might differ
##
## NOTE: Ubuntu 16.04 might contain different sub modules
## of boost, find missing ones by running "cmake" in ceph
## which would complain and compile the missing submodules.
##     HINT: TAKE A LOOK AT "--with-libraries=filesystem,program_options,system,random"
##
##

apt-get update
apt-get install openssh-server git cmake make nano vim screen htop debhelper xz-utils libtool libtool-bin curl attr reprepro

systemctl enable sshd.service
systemctl restart sshd.service


########################################################
###### armhf CROSS COMPILE on arm64 ####################
########################################################
########################################################

dpkg --add-architecture armhf


%%%%%%%%%%%%%%%%%%%%%%% IF ENVIRONMENT IS NON ARM UBUNTU %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
echo "deb http://ports.ubuntu.com/ubuntu-ports xenial-security main restricted" >> /etc/apt/sources.list
echo "deb http://ports.ubuntu.com/ubuntu-ports xenial-security universe" >> /etc/apt/sources.list
echo "deb http://ports.ubuntu.com/ubuntu-ports xenial-security multiverse" >> /etc/apt/sources.list

apt-get update

apt-get install gcc-arm-linux-gnueabihf
apt-get install lsb-release devscripts equivs dpkg-dev debhelper ubuntu-dev-tools sbuild stress

sbuild-update --keygen
mk-sbuild --target=armhf xenial

schroot -c xenial-amd64-armhf


mk-build-deps -aarmhf debian/control

sbuild --build=amd64 --host=armhf -d trusty myapp_1.0.dsc

%%%%%%%%%%%%%%%%%%%%%%% END IF ENVIRONMENT IS NON ARM UBUNTU %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


??????????????????????????????????????????????????????????????????
??????????????????????????????????????????????????????????????????
??????????????????????????????????????????????????????????????????
??????????????????????????????????????????????????????????????????
???????????????? UBUNTU /etc/network/interfaces ??????????????????

auto eth0
#iface eth0 inet dhcp
iface eth0 inet static
    address 192.168.0.130
    netmask 255.255.255.0
    network 192.168.0.0
    broadcast 192.168.0.255
    gateway 192.168.0.1
    dns-nameservers 192.168.0.1

??????????????????????????????????????????????????????????????????
??????????????????????????????????????????????????????????????????
??????????????????????????????????????????????????????????????????
??????????????????????????????????????????????????????????????????
??????????????????????????????????????????????????????????????????



apt-get update
apt-get install libc6:armhf libstdc++6:armhf

>>> undo: apt-get purge ".*:<arch>"

########################################################
########################################################
########################################################

apt-get install equivs

### 16.04
apt-get install python-pip
pip install --upgrade pip
pip --version
...................................................................................................

apt-get install babeltrace
...................................................................................................

git config --global http.sslVerify false
git clone --recursive --branch v10.2.5 https://github.com/ceph/ceph.git
cd ceph

# if you get no package "ceph-build-deps" error
# open "install-deps.sh" and comment line containing
# apt-get remove -y ceph-build-deps

./install-deps.sh
reboot

# compile babeltrace
## HINT: compile exactly the version
## pointed by "babeltrace --help" which
## we obtained using ubuntu repository
## earlier.
cd ~
apt-get install libglib2.0-dev bison flex libpopt0 libpopt-dev libelf-dev libdw-dev swig
git clone https://github.com/efficios/babeltrace.git
cd babeltrace
git checkout tags/v1.3.2 -b to-compile
./bootstrap
./configure --enable-python-bindings
make
make install
ldconfig



##
## in file src/CMakeLists.txt
## find "target_link_libraries(ceph-objectstore-tool"
## remove "tcmalloc" from lsit
##


##
## in file src/CMakeLists.txt line 997
## change "journal/AsyncOpTracker.cc"
## to "common/AsyncOpTracker.cc"
##

##
## in file src/CMakeLists.txt
## locate "tools/rbd_mirror/image_replayer/" source files
## add following line
##
## tools/rbd_mirror/image_replayer/EventPreprocessor.cc
##

##
## ONLY ON ARM
##
## in file src/erasure_code/CMakeLists.txt
## remove from "add_custom_target" from end of file
## values
## "ec_jerasure_sse3"
## "ec_jerasure_sse4"
##
##

##
## ONLY ON ARM
##
##
## in following files do
##
## src/erasure-code/jerasure/gf-complete/src/neon/gf_w4_neon.c
## src/erasure-code/jerasure/gf-complete/src/neon/gf_w8_neon.c
## src/erasure-code/jerasure/gf-complete/src/neon/gf_w16_neon.c
## src/erasure-code/jerasure/gf-complete/src/neon/gf_w32_neon.c
## src/erasure-code/jerasure/gf-complete/src/neon/gf_w64_neon.c
##
## add following line at the head of these files
##                 #include <arm_neon.h>
##

##
## ONLY ON ARM
##
##
## in file src/erasure-code/jerasure/CMakeLists.txt
## after "add_library(neon_objs" add
##
## set_target_properties(neon_objs PROPERTIES COMPILE_FLAGS ${ARM_NEON_FLAGS})
##

##
## in file src/CMakeLists.txt
## comment following line
##
## add_subdirectory(test)
##

##
## in file debian/rules
## add following option to ./configure
##
## --without-tcmalloc
## --without-babeltrace
##

## vim make-debs.sh
## comment "git clean" line
## add "--without-tcmalloc" to ./configure
## replace --with-babeltrace with --without-babeltrace in ./configure

## vim make_dist.sh
## remove "update submodule" section

## vim autogen.sh
## remove "update submodule" section

########## 
########## TO SEE AVAILABLE CMAKE OPTIONS
########## cmake -LH
########## 

# continue with installing ceph
cd ~/ceph
mkdir build
cd build
cmake -DCMAKE_INSTALL_SBINDIR=/sbin -DCMAKE_INSTALL_PREFIX=/usr -DWITH_SYSTEMD=ON -DALLOCATOR=libc ..
make


..............................................................................
.......................... BUILD PACKAGE ...............................
cd ~/ceph
apt-get install debhelper
dpkg-buildpackage
..............................................................................
Package output location:
~/ (like /home/ubuntu)
..............................................................................


..............................................................................
.......................... BUILD PACKAGE ALTERNATIVE APPROACH.................
./make-debs.sh
..............................................................................
..............................................................................
Package output location:
/tmp/release/Ubuntu/WORKDIR/
..............................................................................
..............................................................................


########### Save output package
mkdir -p ~/ceph-10.2.5-build-x64/
rm -rfv /tmp/release/Ubuntu/WORKDIR/ceph-10.2.5
cp -rfv /tmp/release/Ubuntu/WORKDIR/* ~/ceph-10.2.5-build-x64

..............................................................................
make install
ln -s `which sgdisk` /usr/sbin/sgdisk

cd /usr/lib/python2.7/dist-packages/rados
python setup.py install

cd /usr/lib/python2.7/dist-packages/rbd
cp -rfv ~/ceph/src/include/rbd .
python setup.py install

cd /usr/lib/python2.7/dist-packages/cephfs
python setup.py install

cd ~/ceph/src/ceph-disk
python setup.py install
ln -s `which ceph-disk` /usr/sbin/ceph-disk

pip install ceph-deploy

groupadd ceph
useradd -g ceph -M ceph
usermod -L ceph
gpasswd -a ceph ceph

cp -rv ~/ceph/udev/* /etc/udev/rules.d/
reboot

mkdir -p /var/run/ceph
chown -R ceph:ceph /var/run/ceph
chmod -R g+s /var/run/ceph

cp -rv ~/ceph/systemd/* /lib/systemd/system/
systemctl daemon-reload

mv /lib/systemd/system/ceph-create-keys@.service /lib/systemd/system/ceph-create-keys@ubuntu-arm.service
systemctl daemon-reload
systemctl enable ceph-create-keys@ubuntu-arm.service
reboot

cp ~/ceph/src/ceph-osd-prestart.sh /usr/lib/ceph/
chmod +x /usr/lib/ceph/ceph-osd-prestart.sh

cp ~/ceph/build/bin/ceph-crush-location /usr/bin/
chmod +x /usr/bin/ceph-crush-location

mkdir -p /root/.python-eggs
chmod -R 777 /root/.python-eggs

..............................................................................
..............................................................................
..............................................................................
Package Installation
..............................................................................
..............................................................................
..............................................................................

sudo apt-get update
sudo dpkg -i *.deb
sudo apt-get install -f
sudo reboot

sudo apt-get install python-pip
sudo pip install --upgrade pip
sudo pip install ceph-deploy

usermod -s /bin/bash ceph
passwd -d ceph
passwd ceph
echo "ceph ALL = (root) NOPASSWD:ALL" | sudo tee /etc/sudoers.d/ceph
apt-get install openssh-server screen htop vim
systemctl enable sshd
systemctl restart sshd
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>>>>>>>>> set dns-search correctly
vim /etc/network/interfaces

auto enp0s3
iface enp0s3 inet static
        address 10.0.2.219
        netmask 255.255.255.0
        network 10.0.2.0
        broadcast 10.0.2.255
        gateway 10.0.2.2
        dns-search ceph.me 
        dns-nameservers 10.0.2.220 4.2.2.4 8.8.8.8
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

########## Create Base Docker #############

apt-get update
apt-get install apt-transport-https ca-certificates
apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
echo "deb https://apt.dockerproject.org/repo ubuntu-xenial main" | tee /etc/apt/sources.list.d/docker.list
apt-get update
# check if docker-engine is in apt cache
apt-cache policy docker-engine
# install prerequisities
apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual
# reboot server
reboot
# instal docker-engine
apt-get install docker-engine
# install privoxy to help docker pull images over sanctions
apt-get install privoxy
systemctl enable privoxy
vim /etc/privoxy/config
<<<<<<<<<<<<<<<<<<<<
listen-address	127.0.0.1:8085
forward-socks5	/		127.0.0.1:8084	.
>>>>>>>>>>>>>>>>>>>>
systemctl restart privoxy
# enable proxy in docker
mkdir -p /etc/systemd/system/docker.service.d
vim /etc/systemd/system/docker.service.d/http-proxy.conf
...
[Service]
Environment="HTTP_PROXY=http://127.0.0.1:8085/"
...
systemctl daemon-reload
systemctl enable docker
systemctl restart docker
# check if proxy is present
docker info
# add user to docker group
gpasswd -a arcana docker
# reboot
reboot
# you should see under key Http Proxy
# fireup a SOCKS5 proxy server on localhost:8084
ssh -D 8084 .....
# test docker
docker pull ubuntu:xenial
docker run --rm -it ubuntu:xenial
>>>>>>>>>>>>>>>>>>>>>>>>>>>
exit
<<<<<<<<<<<<<<<<<<<<<<<<<<<
# install python pip since docker-compose
# is available to install through pip
apt-get install python-pip
# upgrade it
pip install --upgrade pip
# install docker-compose
pip install docker-compose
# check docker compose
docker-compose version

docker network create -d bridge ceph.me

########## Create DNS server (dockerized) #############

# pull bind image
docker pull sameersbn/bind:latest

# start bind
docker run -td --restart=always --name ns1.ceph.me -h ns1.ceph.me -e ROOT_PASSWORD=root --net ceph.me -w /etc/webmin -p 53:53/udp -p 53:53/tcp -p 10000:10000/tcp sameersbn/bind:latest
ufw reload
ufw allow 53/tcp
ufw allow 53/udp
ufw reload

##
## add <IP> ns1.ceph.me to /etc/hosts of physical machine
## open "https://ns1.ceph.me:10000" in browser
## login with "root/root"
##
>> open Servers -> BIND DNS Server
-> Setup RDNC
-> Forwarding and Transfers -> 4.2.2.4
                            -> 8.8.8.8
-> Create Master Zone -> Domain name/Network -> ceph.me.
                      -> Email Address -> m_kharatizadeh@yahoo.com

..... ADD ENTRIES .....
> @
> ns1.ceph.me
> dns.ceph.me
.......................

# restart DNS service
docker restart ns1.ceph.me

# add nameserver to all servers
vim /etc/network/interfaces
...
dns-nameservers 10.0.2.220 4.2.2.4 8.8.8.8
...

# reboot all servers
reboot

############ CONFIGURE CEPH (ceph-deploy) ####################

# admin node
## alwayssssssssssssssssssssssssss ssh via "ceph" user to admin node
#

ssh-keygen
ssh-copy-id ceph@mon0
ssh-copy-id ceph@osd0
ssh-copy-id ceph@mds0

ceph-deploy new mon0

vim ~/ceph.conf
..................................
public_network = {ip-address}/{netmask}
rbd_default_features = 3
osd_journal_size = 1000
osd_pool_default_size = 1
osd_pool_default_min_size = 1
osd_pool_default_pg_num = 333
osd_pool_default_pgp_num = 333
osd_crush_chooseleaf_type = 1
osd_max_object_name_len = 256
osd_max_object_namespace_len = 64
..................................

#### ceph-deploy install --no-adjust-repos mon0.ceph.me osd0.ceph.me osd1.ceph.me

ceph-deploy mon create-initial

# list osd disks
ceph-deploy disk list osd0

# activate osd
# syntax:
# host:data
# host:data:journal
ceph-deploy osd prepare osd0:/dev/sdb
ceph-deploy osd activate osd0:/dev/sdb1


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% WITH EXTERNAL JOURNAL %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
#### OSD:

gdisk /dev/sdb
> n					# new partition
> 1					# new partition number
> <Enter>				# starting offset (use default)
> <Enter>				# finishing offset (use default)
> 4fbd7e29-9d25-41b8-afd0-062c0ceff05d	# partition type GUID
>
> p					# print new partition table
> w					# write and quit

gdisk /dev/sdc
> n					# new partition
> 1					# new partition number
> <Enter>				# starting offset (use default)
> <Enter>				# finishing offset (use default)
> 45b0969e-9b03-4f30-b4c6-b4b80ceff106	# partition type GUID
>
> p					# print new partition table
> w					# write and quit

#### ADMIN:
ceph-deploy osd prepare osd0:/dev/sdb1:/dev/sdc1
ceph-deploy osd activate osd0:/dev/sdb1:/dev/sdc1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# activate mds
ceph-deploy mds create mds0

# copy configuration files to all nodes
ceph-deploy admin mon0 osd0 mds0 admin
#########################
#
####### or just if you want to push config do
#
# ceph-deploy config push osd0 mds0 mon0
#
#########################

# add permission
sudo chmod +r /etc/ceph/ceph.client.admin.keyring

# view cluster stat
ceph -s

# view mds stats
ceph mds stat

# verify osd tree
ceph osd tree

########## create ceph filesystem #############

# create pools (10 is pgnum)
ceph osd pool create cephfs_data 100
ceph osd pool create cephfs_metadata 100

# verify pools created
ceph osd lspools

# create filesystem
ceph fs new cephfs cephfs_metadata cephfs_data

# verify filesystem is created
ceph fs ls

# view mds stats
ceph mds stat

# test cephfs
ceph-fuse -m 127.0.0.1:6789 -c /etc/ceph/ceph.conf --cluster ceph --name client.admin /mnt
touch /mnt/test.txt

# write some data (10MB)
dd if=/dev/zero of=/mnt/test.data bs=1k count=10000

# check df
df

# unmount
umount /mnt

############ CONFIGURE ISCSI ####################
# https://linhost.info/2012/05/configure-ubuntu-to-serve-as-an-iscsi-target/

apt-get update
apt-get install iscsitarget iscsitarget-dkms attr
reboot

>> migrate /etc/ceph.conf
>> migrate /etc/ceph.client.admin.keyring

# create directory
mkdir -p /var/lib/shared

# create mounter/umounter script
vim /usr/bin/mount-shared
...
#!/bin/bash -

# Image mount/unmount and pool are passed from the systems service as arguments
# Determine if we are mounting or unmounting
if [ "$1" == "m" ]; then
   mkdir -p /var/lib/shared
   umount /var/lib/shared
   ceph-fuse -f -c /etc/ceph/ceph.conf /var/lib/shared
fi
if [ "$1" == "u" ]; then
   umount /var/lib/shared
fi
...
chmod +x /usr/bin/mount-shared

# create systemd service
vim /lib/systemd/system/mount-shared.service
...
[Unit]
Description=CephFS Object Storage Mapping
Conflicts=shutdown.target
Wants=network-online.target
After=NetworkManager-wait-online.service
Before=docker.service iscsitarget.service
[Service]
Type=simple
RemainAfterExit=yes
ExecStart=/usr/bin/mount-shared m
ExecStop=/usr/bin/mount-shared u
Restart=always

[Install]
WantedBy=multi-user.target
...

# enable service
systemctl daemon-reload
systemctl enable mount-shared.service
systemctl restart mount-shared.service

# check if mounted
df

# reboot to check if still mounted
reboot

# create iscsi image file
mkdir -p /var/lib/shared/iscsi.ceph.me
touch /var/lib/shared/iscsi.ceph.me/disk00.img
setfattr -n ceph.file.layout.stripe_unit -v 65536 /var/lib/shared/iscsi.ceph.me/disk00.img

dd if=/dev/zero of=/var/lib/shared/iscsi.ceph.me/disk00.img count=0 bs=1 seek=20G

# configure iscsi
vim /etc/default/iscsitarget
...
ISCSITARGET_ENABLE=true
...

# configure iscsi LUN
vim /etc/iet/ietd.conf
...
# add to the end
# naming rule : [ iqn.yaer-month.domain:any name ]
Target iqn.2017-02.iscsi.ceph.me:target00
    # provided devicce as a iSCSI target
    Lun 0 Path=/var/lib/shared/iscsi.ceph.me/disk00.img,Type=fileio
    # iSCSI Initiator's IP address you allow to connect
    initiator-address 10.0.2.225
    # authentication info ( set anyone you like for "username", "password" )
    # incominguser admin admin
...

systemctl enable iscsitarget.service
systemctl restart iscsitarget.service

############ CONFIGURE STANDALONE CEPH ####################

mkdir -p /etc/ceph
cp /usr/etc/ceph/ceph.conf.example /etc/ceph/ceph.conf
mkdir -p ~/ceph-keys

# create new key for cluster
# e.g.
# 8c7b3da9-85b4-4ee0-b418-79ea12997890
uuidgen

vim /etc/ceph/ceph.conf
... remove [mon.a], [osd.0], [osd.1], [mds.a] sections
... add fsid to ceph.conf
[global]
fsid = <UUID>
... set initial members
[global]
mon initial members = ubuntu-arm
... set monitor hosts
[global]
mon host = 127.0.0.1
... disable features that causes rbd images fail to map
[global]
rbd default features = 3
...

# create monitor secret key
ceph-authtool --create-keyring ~/ceph-keys/ceph.mon.keyring --gen-key -n mon. --cap mon 'allow *'

# generate administrator keyring
ceph-authtool --create-keyring /etc/ceph/ceph.client.admin.keyring --gen-key -n client.admin --set-uid=0 --cap mon 'allow *' --cap osd 'allow *' --cap mds 'allow'

# add client.admin key to ceph.mon.keyring
ceph-authtool ~/ceph-keys/ceph.mon.keyring --import-keyring /etc/ceph/ceph.client.admin.keyring 

# generate a monitor map
monmaptool --create --add ubuntu-arm 127.0.0.1 --fsid <UID> ~/ceph-keys/monmap

# create default data directory {cluster}-{hostname}
mkdir -p /var/lib/ceph/mon/ceph-ubuntu-arm
chown -R ceph:ceph /var/lib/ceph/mon
chmod -R g+s /var/lib/ceph/mon

# populate monitor deamons with monitor map and keyring
ceph-mon --cluster ceph --mkfs -i ubuntu-arm --monmap ~/ceph-keys/monmap --keyring ~/ceph-keys/ceph.mon.keyring
chown -R ceph:ceph /var/lib/ceph/mon

# update configuration
#### osd pool default size = N
#### denotes number of replicas
#### each object should have,
#### also minimum number of OSD's
vim /etc/ceph/ceph.conf
...
[global]
public network = 10.0.2.0/24
auth cluster required = cephx
auth service required = cephx
auth client required = cephx
osd journal size = 1000
osd pool default size = 1
osd pool default min size = 1
osd pool default pg num = 333
osd pool default pgp num = 333
osd crush chooseleaf type = 1
osd max object name len = 256
osd max object namespace len = 64
...

# touch done file
touch /var/lib/ceph/mon/ceph-ubuntu-arm/done
chown ceph:ceph /var/lib/ceph/mon

vim /lib/systemd/system/ceph-mon@.service
...
... remove "PartOf" directive
... change WantedBy directory to
... WantedBy=multi-user.target
...
mv /lib/systemd/system/ceph-mon@.service /lib/systemd/system/ceph-mon@ubuntu-arm.service
systemctl daemon-reload
systemctl restart ceph-mon@ubuntu-arm.service
systemctl enable ceph-mon@ubuntu-arm.service

# verify service state
systemctl status ceph-mon@ubuntu-arm.service

# verify monitor is running
ceph -s

# verify default created pools
ceph osd lspools

# create bootstrap directories
mkdir -p /var/lib/ceph/bootstrap-{osd,rgw,mds}
chown -R ceph:ceph /var/lib/ceph
chmod -R g+s /var/lib/ceph

# create bootstrap keyrings
ceph-authtool -n client.bootstrap-osd --create-keyring /var/lib/ceph/bootstrap-osd/ceph.keyring --cap mon 'allow profile bootstrap-osd'
ceph-authtool -n client.bootstrap-rgw --create-keyring /var/lib/ceph/bootstrap-rgw/ceph.keyring --cap mon 'allow profile bootstrap-rgw'
ceph-authtool -n client.bootstrap-mds --create-keyring /var/lib/ceph/bootstrap-mds/ceph.keyring --cap mon 'allow profile bootstrap-mds'
chown -R ceph:ceph /var/lib/ceph
chmod -R g+s /var/lib/ceph

# import keyrings
ceph auth import -i /var/lib/ceph/bootstrap-osd/ceph.keyring
ceph auth import -i /var/lib/ceph/bootstrap-rgw/ceph.keyring
ceph auth import -i /var/lib/ceph/bootstrap-mds/ceph.keyring

# allow root ssh login
# required for "ceph-deploy"
# to work properly

vim /etc/ssh/sshd_config
...
PermitRootLogin yes
...
systemctl restart sshd

########## MIGRATE FOLLOWING #######################
/etc/ceph/ceph.conf
/etc/ceph/ceph.client.admin.keyring
####################################################

########## OSD CREATION (SHORT FORM) #############
>>>>>>> MIGRATE /var/lib/ceph/bootstrap-osd/ceph.keyring

# generate a new UUID for OSD
uuidgen

# create an OD
ceph osd create <UUID> <num=0,1,2...>

# create default directory
# {cluster name}-{osd number}
mkdir -p /var/lib/ceph/osd/ceph-0
chown -R ceph:ceph /var/lib/ceph/osd
chmod -R g+s /var/lib/ceph/osd

ceph-disk prepare --cluster {cluster-name} --cluster-uuid {uuid} --fs-type {ext4|xfs|btrfs} /dev/sdb

ceph-disk activate /dev/sdb

########## OSD CREATION (LONG FORM) #############
??????? optionally assign different mount point for /var/lib/ceph/osd

# generate a new UUID for OSD
uuidgen

# create an OSD
ceph osd create <UUID> <num=0,1,2...>

# create default directory
# {cluster name}-{osd number}
mkdir -p /var/lib/ceph/osd/ceph-0
chown -R ceph:ceph /var/lib/ceph/osd
chmod -R g+s /var/lib/ceph/osd

# initialize OSD data directory
ceph-osd --cluster ceph -i {osd number} --mkfs --mkkey --osd-uuid <UUID>

# register OSD authentication key
ceph auth add osd.{osd num} osd 'allow *' mon 'allow profile osd' -i /var/lib/ceph/osd/{cluster}-{osd num}/keyring

# add OSD to crush map
ceph --cluster <cluster> osd crush add-bucket <hostname> host

# place cep node under root "default"
ceph --cluster <cluster> osd crush move <hostname> root=default

# add OSD to crushmap so it can begin receiving data
# osd.0 osd.1 ...
ceph --cluster <cluster> osd crush add osd.<number> 1.0 host=<host name>

# reset ownership
chown -R ceph:ceph /var/lib/ceph/osd
chmod -R g+s /var/lib/ceph/osd

# configure systemd service
## @0.service is actually @<osd num>.service
vim /lib/systemd/system/ceph-osd@.service
...
... remove "PartOf" directive
... change WantedBy directory to
... WantedBy=multi-user.target
...
???
??? change user and group to "root" if using
??? different mount point
???
mv /lib/systemd/system/ceph-osd@.service /lib/systemd/system/ceph-osd@0.service
systemctl daemon-reload
systemctl restart ceph-osd@0.service
systemctl enable ceph-osd@0.service

# verify service status
systemctl status ceph-osd@0.service

# verify ceph state
ceph -s

# verify osd tree
ceph osd tree

########## MDS Creation #############
??????? optionally assign different mount point for /var/lib/ceph/mds

# create MDS data directory
# {cluster name}-{host name}
mkdir -p /var/lib/ceph/mds/ceph-ubuntu-arm
chown -R ceph:ceph /var/lib/ceph/mds
chmod -R g+s /var/lib/ceph/mds

# create a keyring for mds
ceph-authtool --create-keyring /var/lib/ceph/mds/ceph-ubuntu-arm/keyring --gen-key -n mds.ubuntu-arm

# import keyring and set caps
ceph auth add mds.ubuntu-arm osd "allow rwx" mds "allow" mon "allow profile mds" -i /var/lib/ceph/mds/ceph-ubuntu-arm/keyring

# add mds to ceph.conf
vim /etc/ceph/ceph.conf
...
[mds.ubuntu-arm]
host = ubuntu-arm
...

# test daemon manual way
ceph-mds --cluster ceph -i ubuntu-arm -m 127.0.0.1:6789
killall -9 ceph-mds

# give perms again
chown -R ceph:ceph /var/lib/ceph/mds
chmod -R g+s /var/lib/ceph/mds

# create systemd service
vim /lib/systemd/system/ceph-mds@.service
...
... remove "PartOf" directive
... change WantedBy directory to
... WantedBy=multi-user.target
...
???
??? change user and group to "root" if using
??? different mount point
???
mv /lib/systemd/system/ceph-mds@.service /lib/systemd/system/ceph-mds@ubuntu-arm.service
systemctl daemon-reload
systemctl restart ceph-mds@ubuntu-arm.service
systemctl enable ceph-mds@ubuntu-arm.service

# verify service status
systemctl status ceph-mds@ubuntu-arm.service

# verify ceph state
ceph -s

# verify osd tree
ceph osd tree

########## test rbd #############

# create a new image of size 100 megabytes
rbd create test --size 100

# verify image created
rbd ls

# disable some features to work with ARM
### rbd feature disable test exclusive-lock object-map fast-diff deep-flatten

# map image
rbd map rbd/test

# verify it is mapped
rbd showmapped

# format as ext4
mkfs.ext4 /dev/rbd/rbd/test

# mount image
mount /dev/rbd/rbd/test /mnt

# verify image
lsblk

# write some data (10MB)
dd if=/dev/zero of=/mnt/test.data bs=1k count=10000

# verify file is created
ls /mnt

# verify free disk space
df -m

# unmount image
umount /mnt

# verify it is not mounted
lsblk

# unmap image
rbd unmap /dev/rbd/rbd/test

# verify it is not mapped
rbd showmapped

# delete image
rbd rm test

# verify image does not exist
rbd ls

########## RGW Creation #############
>>>>>>> MIGRATE /var/lib/ceph/bootstrap-rgw/ceph.keyring

# create directory
mkdir -p /var/lib/ceph/radosgw/ceph-ubuntu-arm/
chown -R ceph:ceph /var/lib/ceph/radosgw
chmod -R g+s /var/lib/ceph/radosgw

# create a keyring for RGW
ceph-authtool --create-keyring /var/lib/ceph/radosgw/ceph-ubuntu-arm/keyring --gen-key -n client.ubuntu-arm

# import keyring and set caps
ceph auth add client.ubuntu-arm mon "allow rw" osd "allow rwx" -i /var/lib/ceph/radosgw/ceph-ubuntu-arm/keyring

# allow firewall
ufw allow 7480

# create systemd service
vim /lib/systemd/system/ceph-radosgw@.service
...
... remove "PartOf" directive
... change WantedBy directory to
... WantedBy=multi-user.target
...
mv /lib/systemd/system/ceph-radosgw@.service /lib/systemd/system/ceph-radosgw@rgw0.ceph.me.service
systemctl daemon-reload
systemctl enable ceph-radosgw@rgw0.ceph.me.service
systemctl restart ceph-radosgw@rgw0.ceph.me.service

### radosgw should now be accessible via http://<host>:7480
### open it in browser to see if it works at all!

# create test user
# and save the keys!
# "access_key" and "secret_key" are used to access
radosgw-admin user create --uid="testuser" --display-name="Test User"

# create swift access
radosgw-admin subuser create --uid=testuser --subuser=testuser:swift --access=full

########## Test RGW S3 Connection #############

pip install boto

vim s3test.py
...
import boto.s3.connection

access_key = '<access key>'
secret_key = '<secret key>'
conn = boto.connect_s3(
        aws_access_key_id=access_key,
        aws_secret_access_key=secret_key,
        host='{hostname}', port={port},
        is_secure=False, calling_format=boto.s3.connection.OrdinaryCallingFormat(),
       )

bucket = conn.create_bucket('my-new-bucket')
for bucket in conn.get_all_buckets():
    print "{name} {created}".format(
        name=bucket.name,
        created=bucket.creation_date,
    )
...

########## Create nginx reverse proxy for Rados Gateway #############

# install nginx
apt-get update
apt-get install nginx

# add firewall rules
ufw reload
ufw allow 80
ufw allow 443
ufw reload

# install openssl
apt-get install openssl

##################################################################
##################################################################
##################################################################
# create CA and issue certificate
##################################################################
##################################################################
##################################################################
mkdir -p /root/ca
cd /root/ca
mkdir certs crl newcerts private
chmod 700 private
touch index.txt
echo 1000 > serial

vim /root/ca/openssl.cnf
........................
[ ca ]
# `man ca`
default_ca = CA_default

[ CA_default ]
# Directory and file locations.
dir               = /root/ca
certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand

# The root key and root certificate.
private_key       = $dir/private/ca.key.pem
certificate       = $dir/certs/ca.cert.pem

# For certificate revocation lists.
crlnumber         = $dir/crlnumber
crl               = $dir/crl/ca.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

# SHA-1 is deprecated, so use SHA-2 instead.
default_md        = sha256

name_opt          = ca_default
cert_opt          = ca_default
default_days      = 375
preserve          = no
policy            = policy_strict

[ policy_strict ]
# The root CA should only sign intermediate certificates that match.
# See the POLICY FORMAT section of `man ca`.
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ policy_loose ]
# Allow the intermediate CA to sign a more diverse range of certificates.
# See the POLICY FORMAT section of the `ca` man page.
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ req ]
# Options for the `req` tool (`man req`).
default_bits        = 2048
distinguished_name  = req_distinguished_name
string_mask         = utf8only

# SHA-1 is deprecated, so use SHA-2 instead.
default_md          = sha256

# Extension to add when the -x509 option is used.
x509_extensions     = v3_ca

[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
countryName                     = Country Name (2 letter code)
stateOrProvinceName             = State or Province Name
localityName                    = Locality Name
0.organizationName              = Organization Name
organizationalUnitName          = Organizational Unit Name
commonName                      = Common Name
emailAddress                    = Email Address

# Optionally, specify some defaults.
countryName_default             = GB
stateOrProvinceName_default     = England
localityName_default            =
0.organizationName_default      = Alice Ltd
#organizationalUnitName_default =
#emailAddress_default           =

[ v3_ca ]
# Extensions for a typical CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ v3_intermediate_ca ]
# Extensions for a typical intermediate CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ usr_cert ]
# Extensions for client certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = client, email
nsComment = "OpenSSL Generated Client Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth, emailProtection

[ server_cert ]
# Extensions for server certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth

[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier=keyid:always

[ ocsp ]
# Extension for OCSP signing certificates (`man ocsp`).
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning
........................

# create root key
cd /root/ca
openssl genrsa -aes256 -out private/ca.key.pem 4096
chmod 400 private/ca.key.pem

# create root certificate
cd /root/ca
openssl req -config openssl.cnf \
      -key private/ca.key.pem \
      -new -x509 -days 7300 -sha256 -extensions v3_ca \
      -out certs/ca.cert.pem
chmod 444 certs/ca.cert.pem

# verify root certificate
openssl x509 -noout -text -in certs/ca.cert.pem

# create intermediate pair
mkdir -p /root/ca/intermediate
cd /root/ca/intermediate
mkdir certs crl csr newcerts private
chmod 700 private
touch index.txt
echo 1000 > serial
echo 1000 > /root/ca/intermediate/crlnumber
vim /root/ca/intermediate/openssl.cnf
........................
# OpenSSL intermediate CA configuration file.
# Copy to `/root/ca/intermediate/openssl.cnf`.

[ ca ]
# `man ca`
default_ca = CA_default

[ CA_default ]
# Directory and file locations.
dir               = /root/ca/intermediate
certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand

# The root key and root certificate.
private_key       = $dir/private/intermediate.key.pem
certificate       = $dir/certs/intermediate.cert.pem

# For certificate revocation lists.
crlnumber         = $dir/crlnumber
crl               = $dir/crl/intermediate.crl.pem
crl_extensions    = crl_ext
default_crl_days  = 30

# SHA-1 is deprecated, so use SHA-2 instead.
default_md        = sha256

name_opt          = ca_default
cert_opt          = ca_default
default_days      = 375
preserve          = no
policy            = policy_loose

[ policy_strict ]
# The root CA should only sign intermediate certificates that match.
# See the POLICY FORMAT section of `man ca`.
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ policy_loose ]
# Allow the intermediate CA to sign a more diverse range of certificates.
# See the POLICY FORMAT section of the `ca` man page.
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ req ]
# Options for the `req` tool (`man req`).
default_bits        = 2048
distinguished_name  = req_distinguished_name
string_mask         = utf8only

# SHA-1 is deprecated, so use SHA-2 instead.
default_md          = sha256

# Extension to add when the -x509 option is used.
x509_extensions     = v3_ca

[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
countryName                     = Country Name (2 letter code)
stateOrProvinceName             = State or Province Name
localityName                    = Locality Name
0.organizationName              = Organization Name
organizationalUnitName          = Organizational Unit Name
commonName                      = Common Name
emailAddress                    = Email Address

# Optionally, specify some defaults.
countryName_default             = GB
stateOrProvinceName_default     = England
localityName_default            =
0.organizationName_default      = Alice Ltd
organizationalUnitName_default  =
emailAddress_default            =

[ v3_ca ]
# Extensions for a typical CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ v3_intermediate_ca ]
# Extensions for a typical intermediate CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, digitalSignature, cRLSign, keyCertSign

[ usr_cert ]
# Extensions for client certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = client, email
nsComment = "OpenSSL Generated Client Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth, emailProtection

[ server_cert ]
# Extensions for server certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth

[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier=keyid:always

[ ocsp ]
# Extension for OCSP signing certificates (`man ocsp`).
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning
........................

# create intermediate key
cd /root/ca
openssl genrsa -aes256 \
      -out intermediate/private/intermediate.key.pem 4096
chmod 400 intermediate/private/intermediate.key.pem

# create intermediate certificate
cd /root/ca
openssl req -config intermediate/openssl.cnf -new -sha256 \
      -key intermediate/private/intermediate.key.pem \
      -out intermediate/csr/intermediate.csr.pem
cd /root/ca
openssl ca -config openssl.cnf -extensions v3_intermediate_ca \
      -days 3650 -notext -md sha256 \
      -in intermediate/csr/intermediate.csr.pem \
      -out intermediate/certs/intermediate.cert.pem
chmod 444 intermediate/certs/intermediate.cert.pem

# verify intermediate certificate
openssl x509 -noout -text \
      -in intermediate/certs/intermediate.cert.pem
openssl verify -CAfile certs/ca.cert.pem \
      intermediate/certs/intermediate.cert.pem

# create certificate chain file
cat intermediate/certs/intermediate.cert.pem \
      certs/ca.cert.pem > intermediate/certs/ca-chain.cert.pem
chmod 444 intermediate/certs/ca-chain.cert.pem

# create server key
cd /root/ca
openssl genrsa -aes256 \
      -out intermediate/private/rgw.ceph.me.key.pem 2048
chmod 400 intermediate/private/rgw.ceph.me.key.pem

# generate certificate
cd /root/ca
openssl req -config intermediate/openssl.cnf \
      -key intermediate/private/rgw.ceph.me.key.pem \
      -new -sha256 -out intermediate/csr/rgw.ceph.me.csr.pem

# sign certificate
cd /root/ca
openssl ca -config intermediate/openssl.cnf \
      -extensions server_cert -days 375 -notext -md sha256 \
      -in intermediate/csr/rgw.ceph.me.csr.pem \
      -out intermediate/certs/rgw.ceph.me.cert.pem
chmod 444 intermediate/certs/rgw.ceph.me.cert.pem


# verify server certificate
openssl x509 -noout -text \
      -in intermediate/certs/rgw.ceph.me.cert.pem

# Deploy certificates
# ca-chain.cert.pem
# ca.cert.pem
# rgw.ceph.me.key.pem
# rgw.ceph.me.crt.pem

##################################################################
##################################################################
##################################################################
##################################################################
##################################################################
##################################################################

# create directories
mkdir -p /var/lib/nginx/rgw.ceph.me
cp -fv /root/ca/intermediate/certs/rgw.ceph.me.crt.pem /var/lib/nginx/rgw.ceph.me/
openssl rsa -in /root/ca/intermediate/private/rgw.ceph.me.key.pem -out /var/lib/nginx/rgw.ceph.me/rgw.ceph.me.key.pem
chown -R www-data:www-data /var/lib/nginx/rgw.ceph.me
chmod -R g+s /var/lib/nginx/rgw.ceph.me

# config nginx
vim /etc/nginx/nginx.conf
........................................................................
... add to http {
sendfile on;
........................................................................
vim /etc/nginx/conf.d/rgw.ceph.me.conf
........................................................................
server {
  listen 443 ssl;
  server_name rgw.ceph.me;
  ssl_verify_client off;
  ssl_certificate /var/lib/nginx/rgw.ceph.me/rgw.ceph.me.crt.pem;
  ssl_certificate_key /var/lib/nginx/rgw.ceph.me/rgw.ceph.me.key.pem;
  client_max_body_size 50M;

  location / {
    proxy_pass http://rgw0.ceph.me:7480/;
    proxy_pass_header Set-Cookie;
    proxy_pass_header P3P;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-NginX-Proxy true;
    proxy_cookie_domain rgw0.ceph.me:7480 rgw.ceph.me;
  }
}

server {
  listen 80;
  server_name rgw.ceph.me;
  return 301 https://$host$request_uri;
}
........................................................................

# test configuration
nginx -c /etc/nginx/nginx.conf

# enable services
systemctl enable nginx
systemctl restart nginx

########## Enable S3 Windows Client #############

... configure DNS nameserver

... Tnt Drive (S3 Compatible)
... cyberduck.io
... s3browser.com
... dragon disk
... use "rgw.ceph.me" as API endpoint

........ install certificates
........ rename from xxxx.cert.pem to -> xxxx.crt
... ca.cert.pem
... ca-chain.cert.pem


Control Panel -> Internet Options -> Content -> Certificates


.... Install For

.. Personal
.. Intermediate Certificate Authorities
.. Trusted Root Certification


########## Create Docker Registry #############
## >>> add "registry.ceph.me" to DNS server

vim /etc/systemd/system/docker.service.d/no-proxy.conf
...
[Service]
Environment="NO_PROXY=registry.ceph.me"
...
vim /lib/systemd/system/docker.service
...
#ExecStart=/usr/bin/dockerd 
ExecStart=/usr/bin/dockerd --insecure-registry=registry.ceph.me:5000
...
systemctl daemon-reload
systemctl enable docker
systemctl restart docker
# check if proxy is present
docker info
# you should see under key Http Proxy

# pull required image
docker pull registry:2

# start registry
docker run -td --name registry.ceph.me -h registry.ceph.me -p 5000:5000 --network ceph.me --restart=always registry:2

# allow port in firewall
ufw reload
ufw allow 5000
ufw reload

########## Base Shared CephFS #############
>> migrate /etc/ceph.conf
>> migrate /etc/ceph.client.admin.keyring

# create directory
mkdir -p /var/lib/shared

# create mounter/umounter script
vim /usr/bin/mount-shared
...
#!/bin/bash -

# Image mount/unmount and pool are passed from the systems service as arguments
# Determine if we are mounting or unmounting
if [ "$1" == "m" ]; then
   mkdir -p /var/lib/shared
   umount /var/lib/shared
   ceph-fuse -f -c /etc/ceph/ceph.conf /var/lib/shared
fi
if [ "$1" == "u" ]; then
   umount /var/lib/shared
fi
...
chmod +x /usr/bin/mount-shared

# create systemd service
vim /lib/systemd/system/mount-shared.service
...
[Unit]
Description=CephFS Object Storage Mapping
Conflicts=shutdown.target
Wants=network-online.target
After=NetworkManager-wait-online.service
Before=docker.service
[Service]
Type=simple
RemainAfterExit=yes
ExecStart=/usr/bin/mount-shared m
ExecStop=/usr/bin/mount-shared u
Restart=always

[Install]
WantedBy=multi-user.target
...

# enable service
systemctl daemon-reload
systemctl enable mount-shared.service
systemctl restart mount-shared.service

# check if mounted
df

# reboot to check if still mounted
reboot


########## Base Swarm Manager #############

# enable firewall rules
ufw reload
ufw allow 2376/tcp
ufw allow 2377/tcp
ufw allow 7946/tcp
ufw allow 7946/udp
ufw allow 4789/udp
ufw reload
systemctl restart docker

########## Base Swarm Worker #############

ufw reload
ufw allow 2376/tcp
ufw allow 7946/tcp
ufw allow 7946/udp
ufw allow 4789/udp
ufw reload
systemctl restart docker

########## Setup Manager #############

docker swarm init --advertise-addr 10.0.2.247

########## Swarm Manager #############

# pull required image
docker pull dperson/samba:latest
docker tag dperson/samba:latest registry.ceph.me:5000/dperson/samba:latest

########## Swarm Worker #############

# join cluster
docker swarm join \
    --token SWMTKN-1-3wcnxbp8xq0f47468dplhlri4uy3u2o965eup083k4lab1o3bx-9egg3lu8stp63xflqaltpq3p7 \
    10.0.2.247:2377

########## Samba Help #############

Configuration

sudo docker run -it --rm dperson/samba -h
Usage: samba.sh [-opt] [command]
Options (fields in '[]' are optional, '<>' are required):
    -h          This help
    -c "<from:to>" setup character mapping for file/directory names
                required arg: "<from:to>" character mappings separated by ','
    -i "<path>" Import smbpassword
                required arg: "<path>" - full file path in container
    -n          Start the 'nmbd' daemon to advertise the shares
    -p          Set ownership and permissions on the shares
    -s "<name;/path>[;browse;readonly;guest;users;admins;wl]" Config a share
                required arg: "<name>;<comment>;</path>"
                <name> is how it's called for clients
                <path> path to share
                NOTE: for the default values, just leave blank
                [browsable] default:'yes' or 'no'
                [readonly] default:'yes' or 'no'
                [guest] allowed default:'yes' or 'no'
                [users] allowed default:'all' or list of allowed users
                [admins] allowed default:'none' or list of admin users
                [writelist] list of users that can write to a RO share
    -t ""       Configure timezone
                possible arg: "[timezone]" - zoneinfo timezone for container
    -u "<username;password>[;ID;group]"       Add a user
                required arg: "<username>;<passwd>"
                <username> for user
                <password> for user
                [ID] for user
                [group] for user
    -w "<workgroup>"       Configure the workgroup (domain) samba should use
                required arg: "<workgroup>"
                <workgroup> for samba

########## Samba Examples #############

sudo docker run -it -p 139:139 -p 445:445 -d dperson/samba \
            -u "example1;badpass" \
            -u "example2;badpass" \
            -s "public;/share" \
            -s "users;/srv;no;no;no;example1,example2" \
            -s "example1 private;/example1;no;no;no;example1" \
            -s "example2 private;/example2;no;no;no;example2"

########## Start Samba #############

mkdir -p /var/lib/shared/share.ceph.me/{config,data}
mkdir -p /var/lib/shared/share.ceph.me/data/{public,users,user1,user2,admin,files}
chown -R nobody:nogroup /var/lib/shared/share.ceph.me
chmod -R g+s /var/lib/shared/share.ceph.me
chmod -R 777 /var/lib/shared/

docker network create -d overlay ceph_me

docker service create --replicas 1 --name share_ceph_me --update-delay 10s \
	--network ceph_me \
	--publish 137:137/udp --publish 138:138/udp --publish 139:139 --publish 445:445 \
	--mount type=bind,src=/var/lib/shared/share.ceph.me/config,dst=/etc/samba \
	--mount type=bind,src=/var/lib/shared/share.ceph.me/data,dst=/mount \
	registry.ceph.me:5000/dperson/samba:latest \
	-n \
	-u "user1;user1" \
	-u "user2;user2" \
	-u "admin;admin" \
	-s "public;/mount/public;yes;no;yes;all;none;" \
	-s "users;/mount/users;yes;no;no;user1,user2,admin;none;" \
	-s "user1;/mount/user1;yes;no;no;user1,admin;none;" \
	-s "user2;/mount/user2;yes;no;no;user2,admin;none;" \
	-s "admin;/mount/admin;yes;no;no;admin;none;" \
	-s "files;/mount/files;yes;yes;no;user1,user2,admin;admin;"
	

########## Forward Samba From Host Machine #############

ssh -L 0.0.0.0:139:10.0.2.247:139 -L 0.0.0.0:445:10.0.2.247:445 arcana@10.0.2.247

firewall-cmd --reload
firewall-cmd --add-port=139/tcp --permanent
firewall-cmd --add-port=445/tcp --permanent
firewall-cmd --reload

########## Create NFS (based on shared /var/lib/shared cephfs drive) #############



########## stop services #############

systemctl stop ceph-mds@ubuntu-arm.service
systemctl stop ceph-osd@0.service
systemctl stop ceph-mon@ubuntu-arm.service
systemctl stop ceph-create-keys@ubuntu-arm.service

systemctl disable ceph-mds@ubuntu-arm.service
systemctl disable ceph-osd@0.service
systemctl disable ceph-mon@ubuntu-arm.service
systemctl disable ceph-create-keys@ubuntu-arm.service


############## ###################

VSTART_DEST=/etc/ceph vstart.sh -d -n -x -l

###############################
..............................................................................


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

## IF moving cmake-built environment
## create symbolic link from /home/ubuntu
## to where-ever new files are located

ln -s /root /home/ubuntu







&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&



